// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Viewport Response object
public struct TrafficIncidentViewportViewpResp: Codable {
    // MARK: Properties

    /// Traffic State information
    public let trafficState: TrafficState?
    /// When the copyright parameter value is true, this contains the full text of the copyright information that must be displayed with the tiles in the viewport
    public let copyrightInformation: String?
    /// Indicates the software version used to generate the information. For use with support queries.
    public let version: String?
    /// Indicates the data provider's internal names for the map data used in the viewport. For use with support queries.
    public let maps: String?

    // MARK: Initializers

    /// Initialize a `TrafficIncidentViewportViewpResp` structure.
    /// - Parameters:
    ///   - trafficState: Traffic State information
    ///   - copyrightInformation: When the copyright parameter value is true, this contains the full text of the copyright information that must be displayed with the tiles in the viewport
    ///   - version: Indicates the software version used to generate the information. For use with support queries.
    ///   - maps: Indicates the data provider's internal names for the map data used in the viewport. For use with support queries.
    public init(
        trafficState: TrafficState? = nil, copyrightInformation: String? = nil, version: String? = nil,
        maps: String? = nil
    ) {
        self.trafficState = trafficState
        self.copyrightInformation = copyrightInformation
        self.version = version
        self.maps = maps
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case trafficState = "trafficState"
        case copyrightInformation = "copyrightIds"
        case version = "@version"
        case maps = "@maps"
    }

    /// Initialize a `TrafficIncidentViewportViewpResp` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.trafficState = try? container.decode(TrafficState.self, forKey: .trafficState)
        self.copyrightInformation = try? container.decode(String.self, forKey: .copyrightInformation)
        self.version = try? container.decode(String.self, forKey: .version)
        self.maps = try? container.decode(String.self, forKey: .maps)
    }

    /// Encode a `TrafficIncidentViewportViewpResp` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if trafficState != nil { try? container.encode(trafficState, forKey: .trafficState) }
        if copyrightInformation != nil { try? container.encode(copyrightInformation, forKey: .copyrightInformation) }
        if version != nil { try? container.encode(version, forKey: .version) }
        if maps != nil { try? container.encode(maps, forKey: .maps) }
    }
}
