// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Traffic State information
public struct TrafficState: Codable {
    // MARK: Properties

    /// The elapsed time (in seconds) from the Traffic Model ID creation.
    public let trafficAge: Int32?
    /// The unique ID called Traffic Model ID is used in calls to Traffic Incident services. It allows to obtain information from particular traffic updates. Traffic Model ID is updated every minute, and is valid for two minutes before it times out.
    public let trafficModelId: String?

    // MARK: Initializers

    /// Initialize a `TrafficState` structure.
    /// - Parameters:
    ///   - trafficAge: The elapsed time (in seconds) from the Traffic Model ID creation.
    ///   - trafficModelId: The unique ID called Traffic Model ID is used in calls to Traffic Incident services. It allows to obtain information from particular traffic updates. Traffic Model ID is updated every minute, and is valid for two minutes before it times out.
    public init(
        trafficAge: Int32? = nil, trafficModelId: String? = nil
    ) {
        self.trafficAge = trafficAge
        self.trafficModelId = trafficModelId
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case trafficAge = "@trafficAge"
        case trafficModelId = "@trafficModelId"
    }

    /// Initialize a `TrafficState` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.trafficAge = try? container.decode(Int32.self, forKey: .trafficAge)
        self.trafficModelId = try? container.decode(String.self, forKey: .trafficModelId)
    }

    /// Encode a `TrafficState` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if trafficAge != nil { try? container.encode(trafficAge, forKey: .trafficAge) }
        if trafficModelId != nil { try? container.encode(trafficModelId, forKey: .trafficModelId) }
    }
}
