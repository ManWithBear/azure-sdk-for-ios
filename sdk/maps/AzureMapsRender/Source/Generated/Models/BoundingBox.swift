// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Parameter group
public struct BoundingBox: Codable {
    // MARK: Properties

    /// Minimum coordinates (south-west point) of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228
    public let southWest: [Double]
    /// Maximum coordinates (north-east point) of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228
    public let northEast: [Double]

    // MARK: Initializers

    /// Initialize a `BoundingBox` structure.
    /// - Parameters:
    ///   - southWest: Minimum coordinates (south-west point) of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228
    ///   - northEast: Maximum coordinates (north-east point) of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228
    public init(
        southWest: [Double], northEast: [Double]
    ) {
        self.southWest = southWest
        self.northEast = northEast
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case southWest = "southWest"
        case northEast = "northEast"
    }

    /// Initialize a `BoundingBox` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.southWest = try container.decode([Double].self, forKey: .southWest)
        self.northEast = try container.decode([Double].self, forKey: .northEast)
    }

    /// Encode a `BoundingBox` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(southWest, forKey: .southWest)
        try container.encode(northEast, forKey: .northEast)
    }
}
