// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// This object is returned from a successful copyright request
public struct Copyright: Codable {
    // MARK: Properties

    /// Format Version property
    public let formatVersion: String?
    /// General Copyrights array
    public let generalCopyrights: [String]?
    /// Regions array
    public let regions: [RegionCopyrights]?

    // MARK: Initializers

    /// Initialize a `Copyright` structure.
    /// - Parameters:
    ///   - formatVersion: Format Version property
    ///   - generalCopyrights: General Copyrights array
    ///   - regions: Regions array
    public init(
        formatVersion: String? = nil, generalCopyrights: [String]? = nil, regions: [RegionCopyrights]? = nil
    ) {
        self.formatVersion = formatVersion
        self.generalCopyrights = generalCopyrights
        self.regions = regions
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case formatVersion = "formatVersion"
        case generalCopyrights = "generalCopyrights"
        case regions = "regions"
    }

    /// Initialize a `Copyright` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.formatVersion = try? container.decode(String.self, forKey: .formatVersion)
        self.generalCopyrights = try? container.decode([String].self, forKey: .generalCopyrights)
        self.regions = try? container.decode([RegionCopyrights].self, forKey: .regions)
    }

    /// Encode a `Copyright` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if formatVersion != nil { try? container.encode(formatVersion, forKey: .formatVersion) }
        if generalCopyrights != nil { try? container.encode(generalCopyrights, forKey: .generalCopyrights) }
        if regions != nil { try? container.encode(regions, forKey: .regions) }
    }
}
