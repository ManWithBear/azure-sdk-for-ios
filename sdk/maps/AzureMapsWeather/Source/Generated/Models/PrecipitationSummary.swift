// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct PrecipitationSummary: Codable {
    // MARK: Properties

    /// The amount of precipitation (liquid equivalent) that has fallen in the past hour.
    public let pastHour: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past three hours.
    public let pastThreeHours: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past six hours. Contains Metric and Imperial Values.
    public let pastSixHours: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past nine hours.
    public let pastNineHours: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past 12 hours.
    public let pastTwelveHours: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past 18 hours.
    public let pastEighteenHours: WeatherValue?
    /// The amount of precipitation (liquid equivalent) that has fallen in the past 24 hours.
    public let pastTwentyFourHours: WeatherValue?

    // MARK: Initializers

    /// Initialize a `PrecipitationSummary` structure.
    /// - Parameters:
    ///   - pastHour: The amount of precipitation (liquid equivalent) that has fallen in the past hour.
    ///   - pastThreeHours: The amount of precipitation (liquid equivalent) that has fallen in the past three hours.
    ///   - pastSixHours: The amount of precipitation (liquid equivalent) that has fallen in the past six hours. Contains Metric and Imperial Values.
    ///   - pastNineHours: The amount of precipitation (liquid equivalent) that has fallen in the past nine hours.
    ///   - pastTwelveHours: The amount of precipitation (liquid equivalent) that has fallen in the past 12 hours.
    ///   - pastEighteenHours: The amount of precipitation (liquid equivalent) that has fallen in the past 18 hours.
    ///   - pastTwentyFourHours: The amount of precipitation (liquid equivalent) that has fallen in the past 24 hours.
    public init(
        pastHour: WeatherValue? = nil, pastThreeHours: WeatherValue? = nil, pastSixHours: WeatherValue? = nil,
        pastNineHours: WeatherValue? = nil, pastTwelveHours: WeatherValue? = nil,
        pastEighteenHours: WeatherValue? = nil,
        pastTwentyFourHours: WeatherValue? = nil
    ) {
        self.pastHour = pastHour
        self.pastThreeHours = pastThreeHours
        self.pastSixHours = pastSixHours
        self.pastNineHours = pastNineHours
        self.pastTwelveHours = pastTwelveHours
        self.pastEighteenHours = pastEighteenHours
        self.pastTwentyFourHours = pastTwentyFourHours
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case pastHour = "pastHour"
        case pastThreeHours = "pastThreeHours"
        case pastSixHours = "pastSixHours"
        case pastNineHours = "pastNineHours"
        case pastTwelveHours = "pastTwelveHours"
        case pastEighteenHours = "pastEighteenHours"
        case pastTwentyFourHours = "pastTwentyFourHours"
    }

    /// Initialize a `PrecipitationSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.pastHour = try? container.decode(WeatherValue.self, forKey: .pastHour)
        self.pastThreeHours = try? container.decode(WeatherValue.self, forKey: .pastThreeHours)
        self.pastSixHours = try? container.decode(WeatherValue.self, forKey: .pastSixHours)
        self.pastNineHours = try? container.decode(WeatherValue.self, forKey: .pastNineHours)
        self.pastTwelveHours = try? container.decode(WeatherValue.self, forKey: .pastTwelveHours)
        self.pastEighteenHours = try? container.decode(WeatherValue.self, forKey: .pastEighteenHours)
        self.pastTwentyFourHours = try? container.decode(WeatherValue.self, forKey: .pastTwentyFourHours)
    }

    /// Encode a `PrecipitationSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if pastHour != nil { try? container.encode(pastHour, forKey: .pastHour) }
        if pastThreeHours != nil { try? container.encode(pastThreeHours, forKey: .pastThreeHours) }
        if pastSixHours != nil { try? container.encode(pastSixHours, forKey: .pastSixHours) }
        if pastNineHours != nil { try? container.encode(pastNineHours, forKey: .pastNineHours) }
        if pastTwelveHours != nil { try? container.encode(pastTwelveHours, forKey: .pastTwelveHours) }
        if pastEighteenHours != nil { try? container.encode(pastEighteenHours, forKey: .pastEighteenHours) }
        if pastTwentyFourHours != nil { try? container.encode(pastTwentyFourHours, forKey: .pastTwentyFourHours) }
    }
}
