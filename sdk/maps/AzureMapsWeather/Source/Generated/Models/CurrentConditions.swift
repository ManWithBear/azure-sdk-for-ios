// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct CurrentConditions: Codable {
    // MARK: Properties

    /// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let dateTime: Iso8601Date?
    /// Phrase description of the current weather condition.  Displayed in specified language.
    public let description: String?
    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?
    /// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
    public let hasPrecipitation: Bool?
    /// Indicates the time of the day. True indicates 'day',', false indicates 'night.
    public let isDaytime: Bool?
    /// Temperature being returned.
    public let temperature: WeatherValue?
    /// RealFeel™ Temperature being returned.
    public let realFeelTemperature: WeatherValue?
    /// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    public let realFeelTemperatureShade: WeatherValue?
    /// Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
    public let relativeHumidity: Int32?
    /// The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
    public let dewPoint: WeatherValue?
    /// Wind details being returned including speed and direction.
    public let wind: WindDetails?
    /// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    public let windGust: WindDetails?
    /// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
    ///   * `0-2` - Low danger from the sun's UV rays or the average person.
    ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
    ///   * `6-7` - High risk of harm from unprotected sun exposure.
    ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
    ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
    public let uvIndex: Int32?
    /// Phrase associated with the `uvIndex`.
    public let uvIndexDescription: String?
    /// Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
    public let visibility: WeatherValue?
    /// Cause of limited visibility.
    public let obstructionsToVisibility: String?
    /// Percent representing cloud cover.
    public let cloudCover: Int32?
    /// Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
    public let cloudCeiling: WeatherValue?
    /// Atmospheric pressure in specified unit.
    public let pressure: WeatherValue?
    /// Atmospheric pressure change.
    public let pressureTendency: PressureTendency?
    /// Departure from the temperature observed 24 hours ago in specified unit.
    public let pastTwentyFourHourTemperatureDeparture: WeatherValue?
    /// Perceived outdoor temperature caused by the combination of air temperature, relative humidity, and wind speed in specified unit.
    public let apparentTemperature: WeatherValue?
    /// Perceived air temperature on exposed skin due to wind.
    public let windChillTemperature: WeatherValue?
    /// The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
    public let wetBulbTemperature: WeatherValue?
    /// Summary of precipitation amounts over the past 24 hours.
    public let precipitationSummary: PrecipitationSummary?
    /// Summary of temperature fluctuations over the past 6, 12, and 24 hours.
    public let temperatureSummary: TemperatureSummary?

    // MARK: Initializers

    /// Initialize a `CurrentConditions` structure.
    /// - Parameters:
    ///   - dateTime: Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - description: Phrase description of the current weather condition.  Displayed in specified language.
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    ///   - hasPrecipitation: Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
    ///   - isDaytime: Indicates the time of the day. True indicates 'day',', false indicates 'night.
    ///   - temperature: Temperature being returned.
    ///   - realFeelTemperature: RealFeel™ Temperature being returned.
    ///   - realFeelTemperatureShade: RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    ///   - relativeHumidity: Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
    ///   - dewPoint: The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
    ///   - wind: Wind details being returned including speed and direction.
    ///   - windGust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    ///   - uvIndex: Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
    ///   * `0-2` - Low danger from the sun's UV rays or the average person.
    ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
    ///   * `6-7` - High risk of harm from unprotected sun exposure.
    ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
    ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
    ///   - uvIndexDescription: Phrase associated with the `uvIndex`.
    ///   - visibility: Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
    ///   - obstructionsToVisibility: Cause of limited visibility.
    ///   - cloudCover: Percent representing cloud cover.
    ///   - cloudCeiling: Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
    ///   - pressure: Atmospheric pressure in specified unit.
    ///   - pressureTendency: Atmospheric pressure change.
    ///   - pastTwentyFourHourTemperatureDeparture: Departure from the temperature observed 24 hours ago in specified unit.
    ///   - apparentTemperature: Perceived outdoor temperature caused by the combination of air temperature, relative humidity, and wind speed in specified unit.
    ///   - windChillTemperature: Perceived air temperature on exposed skin due to wind.
    ///   - wetBulbTemperature: The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
    ///   - precipitationSummary: Summary of precipitation amounts over the past 24 hours.
    ///   - temperatureSummary: Summary of temperature fluctuations over the past 6, 12, and 24 hours.
    public init(
        dateTime: Iso8601Date? = nil, description: String? = nil, iconCode: IconCode? = nil,
        hasPrecipitation: Bool? = nil,
        isDaytime: Bool? = nil, temperature: WeatherValue? = nil, realFeelTemperature: WeatherValue? = nil,
        realFeelTemperatureShade: WeatherValue? = nil, relativeHumidity: Int32? = nil, dewPoint: WeatherValue? = nil,
        wind: WindDetails? = nil, windGust: WindDetails? = nil, uvIndex: Int32? = nil,
        uvIndexDescription: String? = nil,
        visibility: WeatherValue? = nil, obstructionsToVisibility: String? = nil, cloudCover: Int32? = nil,
        cloudCeiling: WeatherValue? = nil, pressure: WeatherValue? = nil, pressureTendency: PressureTendency? = nil,
        pastTwentyFourHourTemperatureDeparture: WeatherValue? = nil, apparentTemperature: WeatherValue? = nil,
        windChillTemperature: WeatherValue? = nil, wetBulbTemperature: WeatherValue? = nil,
        precipitationSummary: PrecipitationSummary? = nil, temperatureSummary: TemperatureSummary? = nil
    ) {
        self.dateTime = dateTime
        self.description = description
        self.iconCode = iconCode
        self.hasPrecipitation = hasPrecipitation
        self.isDaytime = isDaytime
        self.temperature = temperature
        self.realFeelTemperature = realFeelTemperature
        self.realFeelTemperatureShade = realFeelTemperatureShade
        self.relativeHumidity = relativeHumidity
        self.dewPoint = dewPoint
        self.wind = wind
        self.windGust = windGust
        self.uvIndex = uvIndex
        self.uvIndexDescription = uvIndexDescription
        self.visibility = visibility
        self.obstructionsToVisibility = obstructionsToVisibility
        self.cloudCover = cloudCover
        self.cloudCeiling = cloudCeiling
        self.pressure = pressure
        self.pressureTendency = pressureTendency
        self.pastTwentyFourHourTemperatureDeparture = pastTwentyFourHourTemperatureDeparture
        self.apparentTemperature = apparentTemperature
        self.windChillTemperature = windChillTemperature
        self.wetBulbTemperature = wetBulbTemperature
        self.precipitationSummary = precipitationSummary
        self.temperatureSummary = temperatureSummary
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case dateTime = "dateTime"
        case description = "phrase"
        case iconCode = "iconCode"
        case hasPrecipitation = "hasPrecipitation"
        case isDaytime = "isDayTime"
        case temperature = "temperature"
        case realFeelTemperature = "realFeelTemperature"
        case realFeelTemperatureShade = "realFeelTemperatureShade"
        case relativeHumidity = "relativeHumidity"
        case dewPoint = "dewPoint"
        case wind = "wind"
        case windGust = "windGust"
        case uvIndex = "uvIndex"
        case uvIndexDescription = "uvIndexPhrase"
        case visibility = "visibility"
        case obstructionsToVisibility = "obstructionsToVisibility"
        case cloudCover = "cloudCover"
        case cloudCeiling = "ceiling"
        case pressure = "pressure"
        case pressureTendency = "pressureTendency"
        case pastTwentyFourHourTemperatureDeparture = "pastTwentyFourHourTemperatureDeparture"
        case apparentTemperature = "apparentTemperature"
        case windChillTemperature = "windChillTemperature"
        case wetBulbTemperature = "wetBulbTemperature"
        case precipitationSummary = "precipitationSummary"
        case temperatureSummary = "temperatureSummary"
    }

    /// Initialize a `CurrentConditions` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dateTime = try? container.decode(Iso8601Date.self, forKey: .dateTime)
        self.description = try? container.decode(String.self, forKey: .description)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
        self.hasPrecipitation = try? container.decode(Bool.self, forKey: .hasPrecipitation)
        self.isDaytime = try? container.decode(Bool.self, forKey: .isDaytime)
        self.temperature = try? container.decode(WeatherValue.self, forKey: .temperature)
        self.realFeelTemperature = try? container.decode(WeatherValue.self, forKey: .realFeelTemperature)
        self.realFeelTemperatureShade = try? container.decode(WeatherValue.self, forKey: .realFeelTemperatureShade)
        self.relativeHumidity = try? container.decode(Int32.self, forKey: .relativeHumidity)
        self.dewPoint = try? container.decode(WeatherValue.self, forKey: .dewPoint)
        self.wind = try? container.decode(WindDetails.self, forKey: .wind)
        self.windGust = try? container.decode(WindDetails.self, forKey: .windGust)
        self.uvIndex = try? container.decode(Int32.self, forKey: .uvIndex)
        self.uvIndexDescription = try? container.decode(String.self, forKey: .uvIndexDescription)
        self.visibility = try? container.decode(WeatherValue.self, forKey: .visibility)
        self.obstructionsToVisibility = try? container.decode(String.self, forKey: .obstructionsToVisibility)
        self.cloudCover = try? container.decode(Int32.self, forKey: .cloudCover)
        self.cloudCeiling = try? container.decode(WeatherValue.self, forKey: .cloudCeiling)
        self.pressure = try? container.decode(WeatherValue.self, forKey: .pressure)
        self.pressureTendency = try? container.decode(PressureTendency.self, forKey: .pressureTendency)
        self.pastTwentyFourHourTemperatureDeparture = try? container.decode(
            WeatherValue.self,
            forKey: .pastTwentyFourHourTemperatureDeparture
        )
        self.apparentTemperature = try? container.decode(WeatherValue.self, forKey: .apparentTemperature)
        self.windChillTemperature = try? container.decode(WeatherValue.self, forKey: .windChillTemperature)
        self.wetBulbTemperature = try? container.decode(WeatherValue.self, forKey: .wetBulbTemperature)
        self.precipitationSummary = try? container.decode(PrecipitationSummary.self, forKey: .precipitationSummary)
        self.temperatureSummary = try? container.decode(TemperatureSummary.self, forKey: .temperatureSummary)
    }

    /// Encode a `CurrentConditions` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if dateTime != nil { try? container.encode(dateTime, forKey: .dateTime) }
        if description != nil { try? container.encode(description, forKey: .description) }
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
        if hasPrecipitation != nil { try? container.encode(hasPrecipitation, forKey: .hasPrecipitation) }
        if isDaytime != nil { try? container.encode(isDaytime, forKey: .isDaytime) }
        if temperature != nil { try? container.encode(temperature, forKey: .temperature) }
        if realFeelTemperature != nil { try? container.encode(realFeelTemperature, forKey: .realFeelTemperature) }
        if realFeelTemperatureShade !=
            nil { try? container.encode(realFeelTemperatureShade, forKey: .realFeelTemperatureShade) }
        if relativeHumidity != nil { try? container.encode(relativeHumidity, forKey: .relativeHumidity) }
        if dewPoint != nil { try? container.encode(dewPoint, forKey: .dewPoint) }
        if wind != nil { try? container.encode(wind, forKey: .wind) }
        if windGust != nil { try? container.encode(windGust, forKey: .windGust) }
        if uvIndex != nil { try? container.encode(uvIndex, forKey: .uvIndex) }
        if uvIndexDescription != nil { try? container.encode(uvIndexDescription, forKey: .uvIndexDescription) }
        if visibility != nil { try? container.encode(visibility, forKey: .visibility) }
        if obstructionsToVisibility !=
            nil { try? container.encode(obstructionsToVisibility, forKey: .obstructionsToVisibility) }
        if cloudCover != nil { try? container.encode(cloudCover, forKey: .cloudCover) }
        if cloudCeiling != nil { try? container.encode(cloudCeiling, forKey: .cloudCeiling) }
        if pressure != nil { try? container.encode(pressure, forKey: .pressure) }
        if pressureTendency != nil { try? container.encode(pressureTendency, forKey: .pressureTendency) }
        if pastTwentyFourHourTemperatureDeparture !=
            nil
        {
            try? container
                .encode(pastTwentyFourHourTemperatureDeparture, forKey: .pastTwentyFourHourTemperatureDeparture)
        }
        if apparentTemperature != nil { try? container.encode(apparentTemperature, forKey: .apparentTemperature) }
        if windChillTemperature != nil { try? container.encode(windChillTemperature, forKey: .windChillTemperature) }
        if wetBulbTemperature != nil { try? container.encode(wetBulbTemperature, forKey: .wetBulbTemperature) }
        if precipitationSummary != nil { try? container.encode(precipitationSummary, forKey: .precipitationSummary) }
        if temperatureSummary != nil { try? container.encode(temperatureSummary, forKey: .temperatureSummary) }
    }
}
