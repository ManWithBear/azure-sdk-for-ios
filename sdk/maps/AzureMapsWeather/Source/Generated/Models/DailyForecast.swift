// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct DailyForecast: Codable {
    // MARK: Properties

    /// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let dateTime: Iso8601Date?
    /// Temperature values for the day.
    public let temperature: WeatherValueRange?
    /// RealFeel™ Temperature being returned.
    public let realFeelTemperature: WeatherValueRange?
    /// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    public let realFeelTemperatureShade: WeatherValueRange?
    /// Hours of sun.
    public let hoursOfSun: Float?
    /// Summary for mean temperature of Heating Degree Day or Cooling Degree Day information
    public let meanTemperatureDeviation: DegreeDaySummary?
    /// Air quality
    public let airQuality: [AirAndPollen]?
    /// Day forecast detail
    public let daytimeForecast: DailyForecastDetail?
    /// Night forecast detail
    public let nighttimeForecast: DailyForecastDetail?
    /// Source(s) of the forecast data.
    public let sources: [String]?

    // MARK: Initializers

    /// Initialize a `DailyForecast` structure.
    /// - Parameters:
    ///   - dateTime: Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - temperature: Temperature values for the day.
    ///   - realFeelTemperature: RealFeel™ Temperature being returned.
    ///   - realFeelTemperatureShade: RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    ///   - hoursOfSun: Hours of sun.
    ///   - meanTemperatureDeviation: Summary for mean temperature of Heating Degree Day or Cooling Degree Day information
    ///   - airQuality: Air quality
    ///   - daytimeForecast: Day forecast detail
    ///   - nighttimeForecast: Night forecast detail
    ///   - sources: Source(s) of the forecast data.
    public init(
        dateTime: Iso8601Date? = nil, temperature: WeatherValueRange? = nil,
        realFeelTemperature: WeatherValueRange? = nil,
        realFeelTemperatureShade: WeatherValueRange? = nil, hoursOfSun: Float? = nil,
        meanTemperatureDeviation: DegreeDaySummary? = nil, airQuality: [AirAndPollen]? = nil,
        daytimeForecast: DailyForecastDetail? = nil, nighttimeForecast: DailyForecastDetail? = nil,
        sources: [String]? = nil
    ) {
        self.dateTime = dateTime
        self.temperature = temperature
        self.realFeelTemperature = realFeelTemperature
        self.realFeelTemperatureShade = realFeelTemperatureShade
        self.hoursOfSun = hoursOfSun
        self.meanTemperatureDeviation = meanTemperatureDeviation
        self.airQuality = airQuality
        self.daytimeForecast = daytimeForecast
        self.nighttimeForecast = nighttimeForecast
        self.sources = sources
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case dateTime = "date"
        case temperature = "temperature"
        case realFeelTemperature = "realFeelTemperature"
        case realFeelTemperatureShade = "realFeelTemperatureShade"
        case hoursOfSun = "hoursOfSun"
        case meanTemperatureDeviation = "degreeDaySummary"
        case airQuality = "airAndPollen"
        case daytimeForecast = "day"
        case nighttimeForecast = "night"
        case sources = "sources"
    }

    /// Initialize a `DailyForecast` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dateTime = try? container.decode(Iso8601Date.self, forKey: .dateTime)
        self.temperature = try? container.decode(WeatherValueRange.self, forKey: .temperature)
        self.realFeelTemperature = try? container.decode(WeatherValueRange.self, forKey: .realFeelTemperature)
        self.realFeelTemperatureShade = try? container.decode(WeatherValueRange.self, forKey: .realFeelTemperatureShade)
        self.hoursOfSun = try? container.decode(Float.self, forKey: .hoursOfSun)
        self.meanTemperatureDeviation = try? container.decode(DegreeDaySummary.self, forKey: .meanTemperatureDeviation)
        self.airQuality = try? container.decode([AirAndPollen].self, forKey: .airQuality)
        self.daytimeForecast = try? container.decode(DailyForecastDetail.self, forKey: .daytimeForecast)
        self.nighttimeForecast = try? container.decode(DailyForecastDetail.self, forKey: .nighttimeForecast)
        self.sources = try? container.decode([String].self, forKey: .sources)
    }

    /// Encode a `DailyForecast` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if dateTime != nil { try? container.encode(dateTime, forKey: .dateTime) }
        if temperature != nil { try? container.encode(temperature, forKey: .temperature) }
        if realFeelTemperature != nil { try? container.encode(realFeelTemperature, forKey: .realFeelTemperature) }
        if realFeelTemperatureShade !=
            nil { try? container.encode(realFeelTemperatureShade, forKey: .realFeelTemperatureShade) }
        if hoursOfSun != nil { try? container.encode(hoursOfSun, forKey: .hoursOfSun) }
        if meanTemperatureDeviation !=
            nil { try? container.encode(meanTemperatureDeviation, forKey: .meanTemperatureDeviation) }
        if airQuality != nil { try? container.encode(airQuality, forKey: .airQuality) }
        if daytimeForecast != nil { try? container.encode(daytimeForecast, forKey: .daytimeForecast) }
        if nighttimeForecast != nil { try? container.encode(nighttimeForecast, forKey: .nighttimeForecast) }
        if sources != nil { try? container.encode(sources, forKey: .sources) }
    }
}
