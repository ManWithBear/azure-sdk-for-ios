// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Information about a severe weather alert issued within an affected area(s). If multiple alerts are active for the same location, the alerts will be returned in order of `priority` within the API response, with the highest priority alert being returned at the top of the response.
public struct AlertDetails: Codable {
    // MARK: Properties

    /// The name of an area which is affected by the alert. The location that was requested falls under the alert area.
    public let name: String?
    /// Text summarizing the alert in the returned area.
    public let description: String?
    /// The start date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location.
    public let startTime: Iso8601Date?
    /// The end date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location.
    public let endTime: Iso8601Date?
    /// The latest status of the alert in the current area.
    public let latestStatus: LatestStatus?
    /// Full details associated with the alert. Returned if `details`=True. This field is always returned in the language(s) of choice by the issuing provider and Azure Maps only returns what is created by the provider. Please note, some countries/regions may offer their native language and English. Language parameter won’t apply to this field.
    public let details: String?
    /// Language of the `alertDetails`. This field  helps to point out that the language of the `alertDetails` may differ from the requested language parameter. Returned if `details`=True. Language code has been derived from the ISO 639-1 Alpha-2 codes.
    public let language: String?

    // MARK: Initializers

    /// Initialize a `AlertDetails` structure.
    /// - Parameters:
    ///   - name: The name of an area which is affected by the alert. The location that was requested falls under the alert area.
    ///   - description: Text summarizing the alert in the returned area.
    ///   - startTime: The start date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location.
    ///   - endTime: The end date and time of the alert in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the response is the local time to the requested coordinate location.
    ///   - latestStatus: The latest status of the alert in the current area.
    ///   - details: Full details associated with the alert. Returned if `details`=True. This field is always returned in the language(s) of choice by the issuing provider and Azure Maps only returns what is created by the provider. Please note, some countries/regions may offer their native language and English. Language parameter won’t apply to this field.
    ///   - language: Language of the `alertDetails`. This field  helps to point out that the language of the `alertDetails` may differ from the requested language parameter. Returned if `details`=True. Language code has been derived from the ISO 639-1 Alpha-2 codes.
    public init(
        name: String? = nil, description: String? = nil, startTime: Iso8601Date? = nil, endTime: Iso8601Date? = nil,
        latestStatus: LatestStatus? = nil, details: String? = nil, language: String? = nil
    ) {
        self.name = name
        self.description = description
        self.startTime = startTime
        self.endTime = endTime
        self.latestStatus = latestStatus
        self.details = details
        self.language = language
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case description = "summary"
        case startTime = "startTime"
        case endTime = "endTime"
        case latestStatus = "latestStatus"
        case details = "alertDetails"
        case language = "alertDetailsLanguageCode"
    }

    /// Initialize a `AlertDetails` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try? container.decode(String.self, forKey: .name)
        self.description = try? container.decode(String.self, forKey: .description)
        self.startTime = try? container.decode(Iso8601Date.self, forKey: .startTime)
        self.endTime = try? container.decode(Iso8601Date.self, forKey: .endTime)
        self.latestStatus = try? container.decode(LatestStatus.self, forKey: .latestStatus)
        self.details = try? container.decode(String.self, forKey: .details)
        self.language = try? container.decode(String.self, forKey: .language)
    }

    /// Encode a `AlertDetails` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if name != nil { try? container.encode(name, forKey: .name) }
        if description != nil { try? container.encode(description, forKey: .description) }
        if startTime != nil { try? container.encode(startTime, forKey: .startTime) }
        if endTime != nil { try? container.encode(endTime, forKey: .endTime) }
        if latestStatus != nil { try? container.encode(latestStatus, forKey: .latestStatus) }
        if details != nil { try? container.encode(details, forKey: .details) }
        if language != nil { try? container.encode(language, forKey: .language) }
    }
}
