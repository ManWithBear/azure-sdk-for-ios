// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct TemperatureSummary: Codable {
    // MARK: Properties

    /// Summary of temperature fluctuations over the past 6 hours.
    public let pastSixHours: PastHoursTemperature?
    /// Summary of temperature fluctuations over the past 12 hours.
    public let pastTwelveHours: PastHoursTemperature?
    /// Summary of temperature fluctuations over the past 24 hours.
    public let pastTwentyFourHours: PastHoursTemperature?

    // MARK: Initializers

    /// Initialize a `TemperatureSummary` structure.
    /// - Parameters:
    ///   - pastSixHours: Summary of temperature fluctuations over the past 6 hours.
    ///   - pastTwelveHours: Summary of temperature fluctuations over the past 12 hours.
    ///   - pastTwentyFourHours: Summary of temperature fluctuations over the past 24 hours.
    public init(
        pastSixHours: PastHoursTemperature? = nil, pastTwelveHours: PastHoursTemperature? = nil,
        pastTwentyFourHours: PastHoursTemperature? = nil
    ) {
        self.pastSixHours = pastSixHours
        self.pastTwelveHours = pastTwelveHours
        self.pastTwentyFourHours = pastTwentyFourHours
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case pastSixHours = "pastSixHours"
        case pastTwelveHours = "pastTwelveHours"
        case pastTwentyFourHours = "pastTwentyFourHours"
    }

    /// Initialize a `TemperatureSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.pastSixHours = try? container.decode(PastHoursTemperature.self, forKey: .pastSixHours)
        self.pastTwelveHours = try? container.decode(PastHoursTemperature.self, forKey: .pastTwelveHours)
        self.pastTwentyFourHours = try? container.decode(PastHoursTemperature.self, forKey: .pastTwentyFourHours)
    }

    /// Encode a `TemperatureSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if pastSixHours != nil { try? container.encode(pastSixHours, forKey: .pastSixHours) }
        if pastTwelveHours != nil { try? container.encode(pastTwelveHours, forKey: .pastTwelveHours) }
        if pastTwentyFourHours != nil { try? container.encode(pastTwentyFourHours, forKey: .pastTwentyFourHours) }
    }
}
