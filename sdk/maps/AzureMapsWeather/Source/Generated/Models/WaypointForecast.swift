// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct WaypointForecast: Codable {
    // MARK: Properties

    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?
    /// A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    public let shortDescription: String?
    /// Indicates the time of the day. True indicates 'day',', false indicates 'night.
    public let isDaytime: Bool?
    /// Percent representing cloud cover.
    public let cloudCover: Int32?
    /// Specific value of a given unit related to weather.
    public let temperature: WeatherValue?
    /// Wind details being returned including speed and direction.
    public let wind: WindDetails?
    /// Wind details being returned including speed and direction.
    public let windGust: WindDetails?
    /// Precipitation forecast of the weather along the route.
    public let precipitation: WeatherAlongRoutePrecipitation?
    /// Estimation of thunderstorm intensity on an open scale. A value of 0 means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity.
    public let lightningCount: Int32?
    /// A rating that indicates how blinding the sun is for the driver.
    public let sunGlare: SunGlare?
    /// Description of the weather hazard affecting the trip.
    public let hazards: WeatherHazards?
    /// List of weather hazard notifications.
    public let notifications: [WeatherNotification]?

    // MARK: Initializers

    /// Initialize a `WaypointForecast` structure.
    /// - Parameters:
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    ///   - shortDescription: A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    ///   - isDaytime: Indicates the time of the day. True indicates 'day',', false indicates 'night.
    ///   - cloudCover: Percent representing cloud cover.
    ///   - temperature: Specific value of a given unit related to weather.
    ///   - wind: Wind details being returned including speed and direction.
    ///   - windGust: Wind details being returned including speed and direction.
    ///   - precipitation: Precipitation forecast of the weather along the route.
    ///   - lightningCount: Estimation of thunderstorm intensity on an open scale. A value of 0 means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity.
    ///   - sunGlare: A rating that indicates how blinding the sun is for the driver.
    ///   - hazards: Description of the weather hazard affecting the trip.
    ///   - notifications: List of weather hazard notifications.
    public init(
        iconCode: IconCode? = nil, shortDescription: String? = nil, isDaytime: Bool? = nil, cloudCover: Int32? = nil,
        temperature: WeatherValue? = nil, wind: WindDetails? = nil, windGust: WindDetails? = nil,
        precipitation: WeatherAlongRoutePrecipitation? = nil, lightningCount: Int32? = nil, sunGlare: SunGlare? = nil,
        hazards: WeatherHazards? = nil, notifications: [WeatherNotification]? = nil
    ) {
        self.iconCode = iconCode
        self.shortDescription = shortDescription
        self.isDaytime = isDaytime
        self.cloudCover = cloudCover
        self.temperature = temperature
        self.wind = wind
        self.windGust = windGust
        self.precipitation = precipitation
        self.lightningCount = lightningCount
        self.sunGlare = sunGlare
        self.hazards = hazards
        self.notifications = notifications
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case iconCode = "iconCode"
        case shortDescription = "shortPhrase"
        case isDaytime = "isDayTime"
        case cloudCover = "cloudCover"
        case temperature = "temperature"
        case wind = "wind"
        case windGust = "windGust"
        case precipitation = "precipitation"
        case lightningCount = "lightningCount"
        case sunGlare = "sunGlare"
        case hazards = "hazards"
        case notifications = "notifications"
    }

    /// Initialize a `WaypointForecast` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
        self.shortDescription = try? container.decode(String.self, forKey: .shortDescription)
        self.isDaytime = try? container.decode(Bool.self, forKey: .isDaytime)
        self.cloudCover = try? container.decode(Int32.self, forKey: .cloudCover)
        self.temperature = try? container.decode(WeatherValue.self, forKey: .temperature)
        self.wind = try? container.decode(WindDetails.self, forKey: .wind)
        self.windGust = try? container.decode(WindDetails.self, forKey: .windGust)
        self.precipitation = try? container.decode(WeatherAlongRoutePrecipitation.self, forKey: .precipitation)
        self.lightningCount = try? container.decode(Int32.self, forKey: .lightningCount)
        self.sunGlare = try? container.decode(SunGlare.self, forKey: .sunGlare)
        self.hazards = try? container.decode(WeatherHazards.self, forKey: .hazards)
        self.notifications = try? container.decode([WeatherNotification].self, forKey: .notifications)
    }

    /// Encode a `WaypointForecast` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
        if shortDescription != nil { try? container.encode(shortDescription, forKey: .shortDescription) }
        if isDaytime != nil { try? container.encode(isDaytime, forKey: .isDaytime) }
        if cloudCover != nil { try? container.encode(cloudCover, forKey: .cloudCover) }
        if temperature != nil { try? container.encode(temperature, forKey: .temperature) }
        if wind != nil { try? container.encode(wind, forKey: .wind) }
        if windGust != nil { try? container.encode(windGust, forKey: .windGust) }
        if precipitation != nil { try? container.encode(precipitation, forKey: .precipitation) }
        if lightningCount != nil { try? container.encode(lightningCount, forKey: .lightningCount) }
        if sunGlare != nil { try? container.encode(sunGlare, forKey: .sunGlare) }
        if hazards != nil { try? container.encode(hazards, forKey: .hazards) }
        if notifications != nil { try? container.encode(notifications, forKey: .notifications) }
    }
}
