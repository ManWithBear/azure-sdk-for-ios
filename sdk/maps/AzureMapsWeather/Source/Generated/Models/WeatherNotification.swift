// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct WeatherNotification: Codable {
    // MARK: Properties

    /// A type of notification generated to warn drivers of the onset of a hazard, or increase in intensity of a hazard.
    public let type: String?
    /// A severity/hazard index.
    ///   * `0` - No hazard.
    ///   * `1` - Be informed, be aware.
    ///   * `2` - Pay attention, be prepared.
    ///   * `3` - Take action.
    ///   * `4` - Life threatening, emergency.
    public let hazardIndex: HazardIndex?
    /// A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning.
    public let hazardCode: String?
    /// A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    public let shortDescription: String?

    // MARK: Initializers

    /// Initialize a `WeatherNotification` structure.
    /// - Parameters:
    ///   - type: A type of notification generated to warn drivers of the onset of a hazard, or increase in intensity of a hazard.
    ///   - hazardIndex: A severity/hazard index.
    ///   * `0` - No hazard.
    ///   * `1` - Be informed, be aware.
    ///   * `2` - Pay attention, be prepared.
    ///   * `3` - Take action.
    ///   * `4` - Life threatening, emergency.
    ///   - hazardCode: A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning.
    ///   - shortDescription: A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    public init(
        type: String? = nil, hazardIndex: HazardIndex? = nil, hazardCode: String? = nil, shortDescription: String? = nil
    ) {
        self.type = type
        self.hazardIndex = hazardIndex
        self.hazardCode = hazardCode
        self.shortDescription = shortDescription
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case type = "type"
        case hazardIndex = "hazardIndex"
        case hazardCode = "hazardCode"
        case shortDescription = "shortPhrase"
    }

    /// Initialize a `WeatherNotification` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.type = try? container.decode(String.self, forKey: .type)
        self.hazardIndex = try? container.decode(HazardIndex.self, forKey: .hazardIndex)
        self.hazardCode = try? container.decode(String.self, forKey: .hazardCode)
        self.shortDescription = try? container.decode(String.self, forKey: .shortDescription)
    }

    /// Encode a `WeatherNotification` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if type != nil { try? container.encode(type, forKey: .type) }
        if hazardIndex != nil { try? container.encode(hazardIndex, forKey: .hazardIndex) }
        if hazardCode != nil { try? container.encode(hazardCode, forKey: .hazardCode) }
        if shortDescription != nil { try? container.encode(shortDescription, forKey: .shortDescription) }
    }
}
