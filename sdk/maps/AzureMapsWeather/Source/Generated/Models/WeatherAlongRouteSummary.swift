// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Short summary of the weather along the route.
public struct WeatherAlongRouteSummary: Codable {
    // MARK: Properties

    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?
    /// Description of the weather hazard affecting the trip.
    public let hazards: WeatherHazards?

    // MARK: Initializers

    /// Initialize a `WeatherAlongRouteSummary` structure.
    /// - Parameters:
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    ///   - hazards: Description of the weather hazard affecting the trip.
    public init(
        iconCode: IconCode? = nil, hazards: WeatherHazards? = nil
    ) {
        self.iconCode = iconCode
        self.hazards = hazards
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case iconCode = "iconCode"
        case hazards = "hazards"
    }

    /// Initialize a `WeatherAlongRouteSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
        self.hazards = try? container.decode(WeatherHazards.self, forKey: .hazards)
    }

    /// Encode a `WeatherAlongRouteSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
        if hazards != nil { try? container.encode(hazards, forKey: .hazards) }
    }
}
