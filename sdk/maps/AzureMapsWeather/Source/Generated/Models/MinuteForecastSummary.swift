// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Phrase summaries for the entire forecast period.
public struct MinuteForecastSummary: Codable {
    // MARK: Properties

    /// Summary phrase for the next 60 minutes. Phrase length is approximately 60 characters.
    public let briefPhrase60: String?
    /// Short summary phrase for the next 120 minutes. Phrase length is approximately 25 characters.
    public let shortDescription: String?
    /// Summary phrase for the next 120 minutes. Phrase length is approximately 60 characters.
    public let briefDescription: String?
    /// Long summary phrase for the next 120 minutes. Phrase length is 60+ characters.
    public let longPhrase: String?
    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?

    // MARK: Initializers

    /// Initialize a `MinuteForecastSummary` structure.
    /// - Parameters:
    ///   - briefPhrase60: Summary phrase for the next 60 minutes. Phrase length is approximately 60 characters.
    ///   - shortDescription: Short summary phrase for the next 120 minutes. Phrase length is approximately 25 characters.
    ///   - briefDescription: Summary phrase for the next 120 minutes. Phrase length is approximately 60 characters.
    ///   - longPhrase: Long summary phrase for the next 120 minutes. Phrase length is 60+ characters.
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public init(
        briefPhrase60: String? = nil, shortDescription: String? = nil, briefDescription: String? = nil,
        longPhrase: String? = nil, iconCode: IconCode? = nil
    ) {
        self.briefPhrase60 = briefPhrase60
        self.shortDescription = shortDescription
        self.briefDescription = briefDescription
        self.longPhrase = longPhrase
        self.iconCode = iconCode
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case briefPhrase60 = "briefPhrase60"
        case shortDescription = "shortPhrase"
        case briefDescription = "briefPhrase"
        case longPhrase = "longPhrase"
        case iconCode = "iconCode"
    }

    /// Initialize a `MinuteForecastSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.briefPhrase60 = try? container.decode(String.self, forKey: .briefPhrase60)
        self.shortDescription = try? container.decode(String.self, forKey: .shortDescription)
        self.briefDescription = try? container.decode(String.self, forKey: .briefDescription)
        self.longPhrase = try? container.decode(String.self, forKey: .longPhrase)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
    }

    /// Encode a `MinuteForecastSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if briefPhrase60 != nil { try? container.encode(briefPhrase60, forKey: .briefPhrase60) }
        if shortDescription != nil { try? container.encode(shortDescription, forKey: .shortDescription) }
        if briefDescription != nil { try? container.encode(briefDescription, forKey: .briefDescription) }
        if longPhrase != nil { try? container.encode(longPhrase, forKey: .longPhrase) }
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
    }
}
