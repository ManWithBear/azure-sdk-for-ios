// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period.
public struct DailyForecastSummary: Codable {
    // MARK: Properties

    /// Date and time that the summary is in effect, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let startDate: Iso8601Date?
    /// Date and time that the summary period ends, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let endDate: Iso8601Date?
    /// severity
    public let severity: Int32?
    /// Summary phrase of the daily forecast.  Displayed in specified language.
    public let phrase: String?
    /// one or 2 word(s) to summarize the phrase.
    public let category: String?

    // MARK: Initializers

    /// Initialize a `DailyForecastSummary` structure.
    /// - Parameters:
    ///   - startDate: Date and time that the summary is in effect, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - endDate: Date and time that the summary period ends, displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - severity: severity
    ///   - phrase: Summary phrase of the daily forecast.  Displayed in specified language.
    ///   - category: one or 2 word(s) to summarize the phrase.
    public init(
        startDate: Iso8601Date? = nil, endDate: Iso8601Date? = nil, severity: Int32? = nil, phrase: String? = nil,
        category: String? = nil
    ) {
        self.startDate = startDate
        self.endDate = endDate
        self.severity = severity
        self.phrase = phrase
        self.category = category
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case startDate = "startDate"
        case endDate = "endDate"
        case severity = "severity"
        case phrase = "phrase"
        case category = "category"
    }

    /// Initialize a `DailyForecastSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.startDate = try? container.decode(Iso8601Date.self, forKey: .startDate)
        self.endDate = try? container.decode(Iso8601Date.self, forKey: .endDate)
        self.severity = try? container.decode(Int32.self, forKey: .severity)
        self.phrase = try? container.decode(String.self, forKey: .phrase)
        self.category = try? container.decode(String.self, forKey: .category)
    }

    /// Encode a `DailyForecastSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if startDate != nil { try? container.encode(startDate, forKey: .startDate) }
        if endDate != nil { try? container.encode(endDate, forKey: .endDate) }
        if severity != nil { try? container.encode(severity, forKey: .severity) }
        if phrase != nil { try? container.encode(phrase, forKey: .phrase) }
        if category != nil { try? container.encode(category, forKey: .category) }
    }
}
