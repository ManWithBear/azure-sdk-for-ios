// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct AirAndPollen: Codable {
    // MARK: Properties

    /// Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree and UV index.
    public let description: String?
    /// Value of the given type above. Values associated with mold, grass, weed and tree are in units of parts per cubic meter. Both air quality and UV are indices, so they are unitless.
    public let value: Int32?
    /// Category of the air quality or pollution type. For example, low, high, good, moderate, unhealthy, hazardous.
    public let category: String?
    /// Value associated with the air quality or pollution category. These values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
    public let categoryValue: Int32?
    /// Only exists for air quality. Examples include ozone and particle pollution.
    public let airQualityType: String?

    // MARK: Initializers

    /// Initialize a `AirAndPollen` structure.
    /// - Parameters:
    ///   - description: Name of the pollen or pollutant. For example, grass, mold, weed, air quality, tree and UV index.
    ///   - value: Value of the given type above. Values associated with mold, grass, weed and tree are in units of parts per cubic meter. Both air quality and UV are indices, so they are unitless.
    ///   - category: Category of the air quality or pollution type. For example, low, high, good, moderate, unhealthy, hazardous.
    ///   - categoryValue: Value associated with the air quality or pollution category. These values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
    ///   - airQualityType: Only exists for air quality. Examples include ozone and particle pollution.
    public init(
        description: String? = nil, value: Int32? = nil, category: String? = nil, categoryValue: Int32? = nil,
        airQualityType: String? = nil
    ) {
        self.description = description
        self.value = value
        self.category = category
        self.categoryValue = categoryValue
        self.airQualityType = airQualityType
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case description = "name"
        case value = "value"
        case category = "category"
        case categoryValue = "categoryValue"
        case airQualityType = "type"
    }

    /// Initialize a `AirAndPollen` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.description = try? container.decode(String.self, forKey: .description)
        self.value = try? container.decode(Int32.self, forKey: .value)
        self.category = try? container.decode(String.self, forKey: .category)
        self.categoryValue = try? container.decode(Int32.self, forKey: .categoryValue)
        self.airQualityType = try? container.decode(String.self, forKey: .airQualityType)
    }

    /// Encode a `AirAndPollen` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if description != nil { try? container.encode(description, forKey: .description) }
        if value != nil { try? container.encode(value, forKey: .value) }
        if category != nil { try? container.encode(category, forKey: .category) }
        if categoryValue != nil { try? container.encode(categoryValue, forKey: .categoryValue) }
        if airQualityType != nil { try? container.encode(airQualityType, forKey: .airQualityType) }
    }
}
