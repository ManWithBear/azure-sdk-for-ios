// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Wind details being returned including speed and direction.
public struct WindDetails: Codable {
    // MARK: Properties

    /// Wind direction
    public let direction: WindDirection?
    /// Speed of the wind in specified unit.
    public let speed: WindSpeed?

    // MARK: Initializers

    /// Initialize a `WindDetails` structure.
    /// - Parameters:
    ///   - direction: Wind direction
    ///   - speed: Speed of the wind in specified unit.
    public init(
        direction: WindDirection? = nil, speed: WindSpeed? = nil
    ) {
        self.direction = direction
        self.speed = speed
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case direction = "direction"
        case speed = "speed"
    }

    /// Initialize a `WindDetails` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.direction = try? container.decode(WindDirection.self, forKey: .direction)
        self.speed = try? container.decode(WindSpeed.self, forKey: .speed)
    }

    /// Encode a `WindDetails` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if direction != nil { try? container.encode(direction, forKey: .direction) }
        if speed != nil { try? container.encode(speed, forKey: .speed) }
    }
}
