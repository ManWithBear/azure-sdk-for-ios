// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// A rating that indicates how blinding the sun is for the driver.
public struct SunGlare: Codable {
    // MARK: Properties

    /// If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints if provided.
    public let calculatedVehicleHeading: Int32?
    /// An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
    public let glareIndex: Int32?

    // MARK: Initializers

    /// Initialize a `SunGlare` structure.
    /// - Parameters:
    ///   - calculatedVehicleHeading: If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints if provided.
    ///   - glareIndex: An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
    public init(
        calculatedVehicleHeading: Int32? = nil, glareIndex: Int32? = nil
    ) {
        self.calculatedVehicleHeading = calculatedVehicleHeading
        self.glareIndex = glareIndex
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case calculatedVehicleHeading = "calculatedVehicleHeading"
        case glareIndex = "glareIndex"
    }

    /// Initialize a `SunGlare` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.calculatedVehicleHeading = try? container.decode(Int32.self, forKey: .calculatedVehicleHeading)
        self.glareIndex = try? container.decode(Int32.self, forKey: .glareIndex)
    }

    /// Encode a `SunGlare` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if calculatedVehicleHeading !=
            nil { try? container.encode(calculatedVehicleHeading, forKey: .calculatedVehicleHeading) }
        if glareIndex != nil { try? container.encode(glareIndex, forKey: .glareIndex) }
    }
}
