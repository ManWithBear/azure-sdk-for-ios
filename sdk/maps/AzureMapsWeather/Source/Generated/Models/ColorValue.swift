// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct ColorValue: Codable {
    // MARK: Properties

    /// Red component of the RGB value.
    public let red: Int32?
    /// Green component of the RGB value.
    public let green: Int32?
    /// Blue component of the RGB value
    public let blue: Int32?
    /// Hexadecimal color value.
    public let hex: String?

    // MARK: Initializers

    /// Initialize a `ColorValue` structure.
    /// - Parameters:
    ///   - red: Red component of the RGB value.
    ///   - green: Green component of the RGB value.
    ///   - blue: Blue component of the RGB value
    ///   - hex: Hexadecimal color value.
    public init(
        red: Int32? = nil, green: Int32? = nil, blue: Int32? = nil, hex: String? = nil
    ) {
        self.red = red
        self.green = green
        self.blue = blue
        self.hex = hex
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case red = "red"
        case green = "green"
        case blue = "blue"
        case hex = "hex"
    }

    /// Initialize a `ColorValue` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.red = try? container.decode(Int32.self, forKey: .red)
        self.green = try? container.decode(Int32.self, forKey: .green)
        self.blue = try? container.decode(Int32.self, forKey: .blue)
        self.hex = try? container.decode(String.self, forKey: .hex)
    }

    /// Encode a `ColorValue` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if red != nil { try? container.encode(red, forKey: .red) }
        if green != nil { try? container.encode(green, forKey: .green) }
        if blue != nil { try? container.encode(blue, forKey: .blue) }
        if hex != nil { try? container.encode(hex, forKey: .hex) }
    }
}
