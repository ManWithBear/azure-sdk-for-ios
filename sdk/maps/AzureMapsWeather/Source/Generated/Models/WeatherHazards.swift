// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Description of the weather hazard affecting the trip.
public struct WeatherHazards: Codable {
    // MARK: Properties

    /// A severity/hazard index.
    ///   * `0` - No hazard.
    ///   * `1` - Be informed, be aware.
    ///   * `2` - Pay attention, be prepared.
    ///   * `3` - Take action.
    ///   * `4` - Life threatening, emergency.
    public let maxHazardIndex: HazardIndex?
    /// Details of the weather hazards affecting the trip.
    public let details: [HazardDetail]?

    // MARK: Initializers

    /// Initialize a `WeatherHazards` structure.
    /// - Parameters:
    ///   - maxHazardIndex: A severity/hazard index.
    ///   * `0` - No hazard.
    ///   * `1` - Be informed, be aware.
    ///   * `2` - Pay attention, be prepared.
    ///   * `3` - Take action.
    ///   * `4` - Life threatening, emergency.
    ///   - details: Details of the weather hazards affecting the trip.
    public init(
        maxHazardIndex: HazardIndex? = nil, details: [HazardDetail]? = nil
    ) {
        self.maxHazardIndex = maxHazardIndex
        self.details = details
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case maxHazardIndex = "maxHazardIndex"
        case details = "hazardDetails"
    }

    /// Initialize a `WeatherHazards` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.maxHazardIndex = try? container.decode(HazardIndex.self, forKey: .maxHazardIndex)
        self.details = try? container.decode([HazardDetail].self, forKey: .details)
    }

    /// Encode a `WeatherHazards` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if maxHazardIndex != nil { try? container.encode(maxHazardIndex, forKey: .maxHazardIndex) }
        if details != nil { try? container.encode(details, forKey: .details) }
    }
}
