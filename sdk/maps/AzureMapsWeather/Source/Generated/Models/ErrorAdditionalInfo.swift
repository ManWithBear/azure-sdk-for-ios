// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// The resource management error additional info.
public struct ErrorAdditionalInfo: Codable, Swift.Error {
    // MARK: Properties

    /// The additional info type.
    public let type: String?
    /// The additional info.
    public let info: AnyObject?

    // MARK: Initializers

    /// Initialize a `ErrorAdditionalInfo` structure.
    /// - Parameters:
    ///   - type: The additional info type.
    ///   - info: The additional info.
    public init(
        type: String? = nil, info: AnyObject? = nil
    ) {
        self.type = type
        self.info = info
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case type = "type"
        case info = "info"
    }

    /// Initialize a `ErrorAdditionalInfo` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.type = try? container.decode(String.self, forKey: .type)
        //self.info = try? container.decode(AnyObject.self, forKey: .info)
        self.info = try? container.nestedUnkeyedContainer(forKey: .info) as AnyObject
    }

    /// Encode a `ErrorAdditionalInfo` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if type != nil { try? container.encode(type, forKey: .type) }
        //if info != nil { try? container.encode(info, forKey: .info) }
    }
}
