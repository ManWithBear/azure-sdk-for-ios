// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct IntervalSummary: Codable {
    // MARK: Properties

    /// The first minute to which the summary applies.
    public let startMinute: Int32?
    /// The last minute to which the summary applies.
    public let endMinute: Int32?
    /// The number of minutes for which the summary applies.
    public let totalMinutes: Int32?
    /// Short summary phrase. Phrase length is approximately 25 characters.
    public let shortDescription: String?
    /// Brief summary phrase. Phrase length is approximately 60 characters.
    public let briefDescription: String?
    /// Long summary phrase. Phrase length is 60+ characters.
    public let longPhrase: String?
    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?

    // MARK: Initializers

    /// Initialize a `IntervalSummary` structure.
    /// - Parameters:
    ///   - startMinute: The first minute to which the summary applies.
    ///   - endMinute: The last minute to which the summary applies.
    ///   - totalMinutes: The number of minutes for which the summary applies.
    ///   - shortDescription: Short summary phrase. Phrase length is approximately 25 characters.
    ///   - briefDescription: Brief summary phrase. Phrase length is approximately 60 characters.
    ///   - longPhrase: Long summary phrase. Phrase length is 60+ characters.
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public init(
        startMinute: Int32? = nil, endMinute: Int32? = nil, totalMinutes: Int32? = nil, shortDescription: String? = nil,
        briefDescription: String? = nil, longPhrase: String? = nil, iconCode: IconCode? = nil
    ) {
        self.startMinute = startMinute
        self.endMinute = endMinute
        self.totalMinutes = totalMinutes
        self.shortDescription = shortDescription
        self.briefDescription = briefDescription
        self.longPhrase = longPhrase
        self.iconCode = iconCode
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case startMinute = "startMinute"
        case endMinute = "endMinute"
        case totalMinutes = "totalMinutes"
        case shortDescription = "shortPhrase"
        case briefDescription = "briefPhrase"
        case longPhrase = "longPhrase"
        case iconCode = "iconCode"
    }

    /// Initialize a `IntervalSummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.startMinute = try? container.decode(Int32.self, forKey: .startMinute)
        self.endMinute = try? container.decode(Int32.self, forKey: .endMinute)
        self.totalMinutes = try? container.decode(Int32.self, forKey: .totalMinutes)
        self.shortDescription = try? container.decode(String.self, forKey: .shortDescription)
        self.briefDescription = try? container.decode(String.self, forKey: .briefDescription)
        self.longPhrase = try? container.decode(String.self, forKey: .longPhrase)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
    }

    /// Encode a `IntervalSummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if startMinute != nil { try? container.encode(startMinute, forKey: .startMinute) }
        if endMinute != nil { try? container.encode(endMinute, forKey: .endMinute) }
        if totalMinutes != nil { try? container.encode(totalMinutes, forKey: .totalMinutes) }
        if shortDescription != nil { try? container.encode(shortDescription, forKey: .shortDescription) }
        if briefDescription != nil { try? container.encode(briefDescription, forKey: .briefDescription) }
        if longPhrase != nil { try? container.encode(longPhrase, forKey: .longPhrase) }
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
    }
}
