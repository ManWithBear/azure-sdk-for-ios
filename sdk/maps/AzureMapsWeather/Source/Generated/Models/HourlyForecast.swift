// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct HourlyForecast: Codable {
    // MARK: Properties

    /// Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let dateTime: Iso8601Date?
    /// Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let iconCode: IconCode?
    /// Phrase description of the weather icon.
    public let iconPhrase: String?
    /// Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
    public let hasPrecipitation: Bool?
    /// Specifies whether or not it is daylight. True indicates day light.
    public let isDaylight: Bool?
    /// Temperature being returned.
    public let temperature: WeatherValue?
    /// RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    public let realFeelTemperature: WeatherValue?
    /// The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
    public let wetBulbTemperature: WeatherValue?
    /// The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
    public let dewPoint: WeatherValue?
    /// Wind details being returned including speed and direction.
    public let wind: WindDetails?
    /// Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    public let windGust: WindDetails?
    /// Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
    public let relativeHumidity: Int32?
    /// Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
    public let visibility: WeatherValue?
    /// Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
    public let cloudCeiling: WeatherValue?
    /// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
    ///   * `0-2` - Low danger from the sun's UV rays or the average person.
    ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
    ///   * `6-7` - High risk of harm from unprotected sun exposure.
    ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
    ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
    public let uvIndex: Int32?
    /// Phrase associated with the `uvIndex`.
    public let uvIndexDescription: String?
    /// Percent representing the probability of precipitation. For example, '20'.
    public let precipitationProbability: Int32?
    /// Percent representing the probability of rain. For example, '50'.
    public let rainProbability: Int32?
    /// Percent representing the probability of snow. For example, '50'.
    public let snowProbability: Int32?
    /// Percent representing the probability of snow. For example, '5'.
    public let iceProbability: Int32?
    /// Total liquid equivalent of precipitation during the forecast period.
    public let totalLiquid: WeatherValue?
    /// Rain
    public let rain: WeatherValue?
    /// Snow
    public let snow: WeatherValue?
    /// Ice
    public let ice: WeatherValue?
    /// Percent representing cloud cover.
    public let cloudCover: Int32?

    // MARK: Initializers

    /// Initialize a `HourlyForecast` structure.
    /// - Parameters:
    ///   - dateTime: Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - iconCode: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    ///   - iconPhrase: Phrase description of the weather icon.
    ///   - hasPrecipitation: Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation.
    ///   - isDaylight: Specifies whether or not it is daylight. True indicates day light.
    ///   - temperature: Temperature being returned.
    ///   - realFeelTemperature: RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade.
    ///   - wetBulbTemperature: The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation.
    ///   - dewPoint: The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation.
    ///   - wind: Wind details being returned including speed and direction.
    ///   - windGust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    ///   - relativeHumidity: Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.
    ///   - visibility: Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned.
    ///   - cloudCeiling: Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds.
    ///   - uvIndex: Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
    ///   * `0-2` - Low danger from the sun's UV rays or the average person.
    ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
    ///   * `6-7` - High risk of harm from unprotected sun exposure.
    ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
    ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
    ///   - uvIndexDescription: Phrase associated with the `uvIndex`.
    ///   - precipitationProbability: Percent representing the probability of precipitation. For example, '20'.
    ///   - rainProbability: Percent representing the probability of rain. For example, '50'.
    ///   - snowProbability: Percent representing the probability of snow. For example, '50'.
    ///   - iceProbability: Percent representing the probability of snow. For example, '5'.
    ///   - totalLiquid: Total liquid equivalent of precipitation during the forecast period.
    ///   - rain: Rain
    ///   - snow: Snow
    ///   - ice: Ice
    ///   - cloudCover: Percent representing cloud cover.
    public init(
        dateTime: Iso8601Date? = nil, iconCode: IconCode? = nil, iconPhrase: String? = nil,
        hasPrecipitation: Bool? = nil,
        isDaylight: Bool? = nil, temperature: WeatherValue? = nil, realFeelTemperature: WeatherValue? = nil,
        wetBulbTemperature: WeatherValue? = nil, dewPoint: WeatherValue? = nil, wind: WindDetails? = nil,
        windGust: WindDetails? = nil, relativeHumidity: Int32? = nil, visibility: WeatherValue? = nil,
        cloudCeiling: WeatherValue? = nil, uvIndex: Int32? = nil, uvIndexDescription: String? = nil,
        precipitationProbability: Int32? = nil, rainProbability: Int32? = nil, snowProbability: Int32? = nil,
        iceProbability: Int32? = nil, totalLiquid: WeatherValue? = nil, rain: WeatherValue? = nil,
        snow: WeatherValue? = nil, ice: WeatherValue? = nil, cloudCover: Int32? = nil
    ) {
        self.dateTime = dateTime
        self.iconCode = iconCode
        self.iconPhrase = iconPhrase
        self.hasPrecipitation = hasPrecipitation
        self.isDaylight = isDaylight
        self.temperature = temperature
        self.realFeelTemperature = realFeelTemperature
        self.wetBulbTemperature = wetBulbTemperature
        self.dewPoint = dewPoint
        self.wind = wind
        self.windGust = windGust
        self.relativeHumidity = relativeHumidity
        self.visibility = visibility
        self.cloudCeiling = cloudCeiling
        self.uvIndex = uvIndex
        self.uvIndexDescription = uvIndexDescription
        self.precipitationProbability = precipitationProbability
        self.rainProbability = rainProbability
        self.snowProbability = snowProbability
        self.iceProbability = iceProbability
        self.totalLiquid = totalLiquid
        self.rain = rain
        self.snow = snow
        self.ice = ice
        self.cloudCover = cloudCover
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case dateTime = "date"
        case iconCode = "iconCode"
        case iconPhrase = "iconPhrase"
        case hasPrecipitation = "hasPrecipitation"
        case isDaylight = "isDaylight"
        case temperature = "temperature"
        case realFeelTemperature = "realFeelTemperature"
        case wetBulbTemperature = "wetBulbTemperature"
        case dewPoint = "dewPoint"
        case wind = "wind"
        case windGust = "windGust"
        case relativeHumidity = "relativeHumidity"
        case visibility = "visibility"
        case cloudCeiling = "ceiling"
        case uvIndex = "uvIndex"
        case uvIndexDescription = "uvIndexPhrase"
        case precipitationProbability = "precipitationProbability"
        case rainProbability = "rainProbability"
        case snowProbability = "snowProbability"
        case iceProbability = "iceProbability"
        case totalLiquid = "totalLiquid"
        case rain = "rain"
        case snow = "snow"
        case ice = "ice"
        case cloudCover = "cloudCover"
    }

    /// Initialize a `HourlyForecast` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dateTime = try? container.decode(Iso8601Date.self, forKey: .dateTime)
        self.iconCode = try? container.decode(IconCode.self, forKey: .iconCode)
        self.iconPhrase = try? container.decode(String.self, forKey: .iconPhrase)
        self.hasPrecipitation = try? container.decode(Bool.self, forKey: .hasPrecipitation)
        self.isDaylight = try? container.decode(Bool.self, forKey: .isDaylight)
        self.temperature = try? container.decode(WeatherValue.self, forKey: .temperature)
        self.realFeelTemperature = try? container.decode(WeatherValue.self, forKey: .realFeelTemperature)
        self.wetBulbTemperature = try? container.decode(WeatherValue.self, forKey: .wetBulbTemperature)
        self.dewPoint = try? container.decode(WeatherValue.self, forKey: .dewPoint)
        self.wind = try? container.decode(WindDetails.self, forKey: .wind)
        self.windGust = try? container.decode(WindDetails.self, forKey: .windGust)
        self.relativeHumidity = try? container.decode(Int32.self, forKey: .relativeHumidity)
        self.visibility = try? container.decode(WeatherValue.self, forKey: .visibility)
        self.cloudCeiling = try? container.decode(WeatherValue.self, forKey: .cloudCeiling)
        self.uvIndex = try? container.decode(Int32.self, forKey: .uvIndex)
        self.uvIndexDescription = try? container.decode(String.self, forKey: .uvIndexDescription)
        self.precipitationProbability = try? container.decode(Int32.self, forKey: .precipitationProbability)
        self.rainProbability = try? container.decode(Int32.self, forKey: .rainProbability)
        self.snowProbability = try? container.decode(Int32.self, forKey: .snowProbability)
        self.iceProbability = try? container.decode(Int32.self, forKey: .iceProbability)
        self.totalLiquid = try? container.decode(WeatherValue.self, forKey: .totalLiquid)
        self.rain = try? container.decode(WeatherValue.self, forKey: .rain)
        self.snow = try? container.decode(WeatherValue.self, forKey: .snow)
        self.ice = try? container.decode(WeatherValue.self, forKey: .ice)
        self.cloudCover = try? container.decode(Int32.self, forKey: .cloudCover)
    }

    /// Encode a `HourlyForecast` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if dateTime != nil { try? container.encode(dateTime, forKey: .dateTime) }
        if iconCode != nil { try? container.encode(iconCode, forKey: .iconCode) }
        if iconPhrase != nil { try? container.encode(iconPhrase, forKey: .iconPhrase) }
        if hasPrecipitation != nil { try? container.encode(hasPrecipitation, forKey: .hasPrecipitation) }
        if isDaylight != nil { try? container.encode(isDaylight, forKey: .isDaylight) }
        if temperature != nil { try? container.encode(temperature, forKey: .temperature) }
        if realFeelTemperature != nil { try? container.encode(realFeelTemperature, forKey: .realFeelTemperature) }
        if wetBulbTemperature != nil { try? container.encode(wetBulbTemperature, forKey: .wetBulbTemperature) }
        if dewPoint != nil { try? container.encode(dewPoint, forKey: .dewPoint) }
        if wind != nil { try? container.encode(wind, forKey: .wind) }
        if windGust != nil { try? container.encode(windGust, forKey: .windGust) }
        if relativeHumidity != nil { try? container.encode(relativeHumidity, forKey: .relativeHumidity) }
        if visibility != nil { try? container.encode(visibility, forKey: .visibility) }
        if cloudCeiling != nil { try? container.encode(cloudCeiling, forKey: .cloudCeiling) }
        if uvIndex != nil { try? container.encode(uvIndex, forKey: .uvIndex) }
        if uvIndexDescription != nil { try? container.encode(uvIndexDescription, forKey: .uvIndexDescription) }
        if precipitationProbability !=
            nil { try? container.encode(precipitationProbability, forKey: .precipitationProbability) }
        if rainProbability != nil { try? container.encode(rainProbability, forKey: .rainProbability) }
        if snowProbability != nil { try? container.encode(snowProbability, forKey: .snowProbability) }
        if iceProbability != nil { try? container.encode(iceProbability, forKey: .iceProbability) }
        if totalLiquid != nil { try? container.encode(totalLiquid, forKey: .totalLiquid) }
        if rain != nil { try? container.encode(rain, forKey: .rain) }
        if snow != nil { try? container.encode(snow, forKey: .snow) }
        if ice != nil { try? container.encode(ice, forKey: .ice) }
        if cloudCover != nil { try? container.encode(cloudCover, forKey: .cloudCover) }
    }
}
