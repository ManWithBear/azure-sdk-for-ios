// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Description of a severe weather alert.
public struct SevereWeatherAlertDescription: Codable {
    // MARK: Properties

    /// Description of the alert in the specified language. By default English (en-US) is returned if the language parameter is not specified in the request.
    public let description: String?
    /// Description of the alert in English (en-US).
    public let status: String?

    // MARK: Initializers

    /// Initialize a `SevereWeatherAlertDescription` structure.
    /// - Parameters:
    ///   - description: Description of the alert in the specified language. By default English (en-US) is returned if the language parameter is not specified in the request.
    ///   - status: Description of the alert in English (en-US).
    public init(
        description: String? = nil, status: String? = nil
    ) {
        self.description = description
        self.status = status
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case description = "localized"
        case status = "english"
    }

    /// Initialize a `SevereWeatherAlertDescription` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.description = try? container.decode(String.self, forKey: .description)
        self.status = try? container.decode(String.self, forKey: .status)
    }

    /// Encode a `SevereWeatherAlertDescription` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if description != nil { try? container.encode(description, forKey: .description) }
        if status != nil { try? container.encode(status, forKey: .status) }
    }
}
