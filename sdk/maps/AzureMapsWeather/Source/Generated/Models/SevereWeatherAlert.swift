// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Information about a severe weather alert.
public struct SevereWeatherAlert: Codable {
    // MARK: Properties

    /// 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
    public let countryCode: String?
    /// A unique numerical identifier for a weather alert.
    public let alertId: Int32?
    /// Description of the alert.
    public let description: SevereWeatherAlertDescription?
    /// Category of the alert.
    public let category: String?
    /// Number signifying the importance or ranking order of the given alert within the country/region it has originated. A lower number signifies a higher priority. For example, 1 is the highest priority. The number varies by country/region and can change over time as each country/region evolves their alert systems.
    public let priority: Int32?
    /// Classification of the alert. This field is not available for all countries and therefore not always returned.
    public let classification: String?
    /// Severity level of the alert. This field is not available for all countries and therefore not always returned.
    public let level: String?
    /// The provider of the alert information. By default the source is returned in English (en-US). The alerts are from official Government Meteorological Agencies and leading global weather alert providers.
    public let source: String?
    /// A numerical identifier associated with the source provider name of the alert data.
    public let sourceId: Int32?
    /// A disclaimer regarding the source of the alert information. This field is not always available. For example, disclaimer may include details about the delays or potential issues related to the alarm.
    public let disclaimer: String?
    /// Information about the alert specific to the affected area(s).
    public let alertDetails: [AlertDetails]?

    // MARK: Initializers

    /// Initialize a `SevereWeatherAlert` structure.
    /// - Parameters:
    ///   - countryCode: 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
    ///   - alertId: A unique numerical identifier for a weather alert.
    ///   - description: Description of the alert.
    ///   - category: Category of the alert.
    ///   - priority: Number signifying the importance or ranking order of the given alert within the country/region it has originated. A lower number signifies a higher priority. For example, 1 is the highest priority. The number varies by country/region and can change over time as each country/region evolves their alert systems.
    ///   - classification: Classification of the alert. This field is not available for all countries and therefore not always returned.
    ///   - level: Severity level of the alert. This field is not available for all countries and therefore not always returned.
    ///   - source: The provider of the alert information. By default the source is returned in English (en-US). The alerts are from official Government Meteorological Agencies and leading global weather alert providers.
    ///   - sourceId: A numerical identifier associated with the source provider name of the alert data.
    ///   - disclaimer: A disclaimer regarding the source of the alert information. This field is not always available. For example, disclaimer may include details about the delays or potential issues related to the alarm.
    ///   - alertDetails: Information about the alert specific to the affected area(s).
    public init(
        countryCode: String? = nil, alertId: Int32? = nil, description: SevereWeatherAlertDescription? = nil,
        category: String? = nil, priority: Int32? = nil, classification: String? = nil, level: String? = nil,
        source: String? = nil, sourceId: Int32? = nil, disclaimer: String? = nil, alertDetails: [AlertDetails]? = nil
    ) {
        self.countryCode = countryCode
        self.alertId = alertId
        self.description = description
        self.category = category
        self.priority = priority
        self.classification = classification
        self.level = level
        self.source = source
        self.sourceId = sourceId
        self.disclaimer = disclaimer
        self.alertDetails = alertDetails
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case countryCode = "countryCode"
        case alertId = "alertId"
        case description = "description"
        case category = "category"
        case priority = "priority"
        case classification = "class"
        case level = "level"
        case source = "source"
        case sourceId = "sourceId"
        case disclaimer = "disclaimer"
        case alertDetails = "alertAreas"
    }

    /// Initialize a `SevereWeatherAlert` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.countryCode = try? container.decode(String.self, forKey: .countryCode)
        self.alertId = try? container.decode(Int32.self, forKey: .alertId)
        self.description = try? container.decode(SevereWeatherAlertDescription.self, forKey: .description)
        self.category = try? container.decode(String.self, forKey: .category)
        self.priority = try? container.decode(Int32.self, forKey: .priority)
        self.classification = try? container.decode(String.self, forKey: .classification)
        self.level = try? container.decode(String.self, forKey: .level)
        self.source = try? container.decode(String.self, forKey: .source)
        self.sourceId = try? container.decode(Int32.self, forKey: .sourceId)
        self.disclaimer = try? container.decode(String.self, forKey: .disclaimer)
        self.alertDetails = try? container.decode([AlertDetails].self, forKey: .alertDetails)
    }

    /// Encode a `SevereWeatherAlert` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if countryCode != nil { try? container.encode(countryCode, forKey: .countryCode) }
        if alertId != nil { try? container.encode(alertId, forKey: .alertId) }
        if description != nil { try? container.encode(description, forKey: .description) }
        if category != nil { try? container.encode(category, forKey: .category) }
        if priority != nil { try? container.encode(priority, forKey: .priority) }
        if classification != nil { try? container.encode(classification, forKey: .classification) }
        if level != nil { try? container.encode(level, forKey: .level) }
        if source != nil { try? container.encode(source, forKey: .source) }
        if sourceId != nil { try? container.encode(sourceId, forKey: .sourceId) }
        if disclaimer != nil { try? container.encode(disclaimer, forKey: .disclaimer) }
        if alertDetails != nil { try? container.encode(alertDetails, forKey: .alertDetails) }
    }
}
