// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Returned temperature values.
public struct WeatherValueRange: Codable {
    // MARK: Properties

    /// Minimum temperature for the time period.
    public let minimum: WeatherValue?
    /// Maximum temperature for the time period
    public let maximum: WeatherValue?

    // MARK: Initializers

    /// Initialize a `WeatherValueRange` structure.
    /// - Parameters:
    ///   - minimum: Minimum temperature for the time period.
    ///   - maximum: Maximum temperature for the time period
    public init(
        minimum: WeatherValue? = nil, maximum: WeatherValue? = nil
    ) {
        self.minimum = minimum
        self.maximum = maximum
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case minimum = "minimum"
        case maximum = "maximum"
    }

    /// Initialize a `WeatherValueRange` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.minimum = try? container.decode(WeatherValue.self, forKey: .minimum)
        self.maximum = try? container.decode(WeatherValue.self, forKey: .maximum)
    }

    /// Encode a `WeatherValueRange` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if minimum != nil { try? container.encode(minimum, forKey: .minimum) }
        if maximum != nil { try? container.encode(maximum, forKey: .maximum) }
    }
}
