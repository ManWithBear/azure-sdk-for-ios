// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Local weather data provider information.
public struct LocalSource: Codable {
    // MARK: Properties

    /// Numeric identifier, unique to the local data provider.
    public let id: Int32?
    /// Name of the local data provider. Name is displayed in the language specified by language code in URL, if available. Otherwise, Name is displayed in English or the language in which the name was provided.
    public let name: String?
    /// Weather code provided by the local data provider. This weather code allows the forecast to be matched to icons provided by the local data provider instead of Azure Maps icons.
    public let weatherCode: String?

    // MARK: Initializers

    /// Initialize a `LocalSource` structure.
    /// - Parameters:
    ///   - id: Numeric identifier, unique to the local data provider.
    ///   - name: Name of the local data provider. Name is displayed in the language specified by language code in URL, if available. Otherwise, Name is displayed in English or the language in which the name was provided.
    ///   - weatherCode: Weather code provided by the local data provider. This weather code allows the forecast to be matched to icons provided by the local data provider instead of Azure Maps icons.
    public init(
        id: Int32? = nil, name: String? = nil, weatherCode: String? = nil
    ) {
        self.id = id
        self.name = name
        self.weatherCode = weatherCode
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case name = "name"
        case weatherCode = "weatherCode"
    }

    /// Initialize a `LocalSource` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(Int32.self, forKey: .id)
        self.name = try? container.decode(String.self, forKey: .name)
        self.weatherCode = try? container.decode(String.self, forKey: .weatherCode)
    }

    /// Encode a `LocalSource` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if name != nil { try? container.encode(name, forKey: .name) }
        if weatherCode != nil { try? container.encode(weatherCode, forKey: .weatherCode) }
    }
}
