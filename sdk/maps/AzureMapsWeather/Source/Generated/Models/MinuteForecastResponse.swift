// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct MinuteForecastResponse: Codable {
    // MARK: Properties

    /// Phrase summaries for the entire forecast period.
    public let summary: MinuteForecastSummary?
    /// Summary information for each interval in the forecast. The Summaries breaks down each potential interval where precipitation starts and stops.
    public let intervalSummaries: [IntervalSummary]?
    /// Forecast data for each interval in the forecast.
    public let intervals: [ForecastInterval]?

    // MARK: Initializers

    /// Initialize a `MinuteForecastResponse` structure.
    /// - Parameters:
    ///   - summary: Phrase summaries for the entire forecast period.
    ///   - intervalSummaries: Summary information for each interval in the forecast. The Summaries breaks down each potential interval where precipitation starts and stops.
    ///   - intervals: Forecast data for each interval in the forecast.
    public init(
        summary: MinuteForecastSummary? = nil, intervalSummaries: [IntervalSummary]? = nil,
        intervals: [ForecastInterval]? = nil
    ) {
        self.summary = summary
        self.intervalSummaries = intervalSummaries
        self.intervals = intervals
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case summary = "summary"
        case intervalSummaries = "intervalSummaries"
        case intervals = "intervals"
    }

    /// Initialize a `MinuteForecastResponse` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.summary = try? container.decode(MinuteForecastSummary.self, forKey: .summary)
        self.intervalSummaries = try? container.decode([IntervalSummary].self, forKey: .intervalSummaries)
        self.intervals = try? container.decode([ForecastInterval].self, forKey: .intervals)
    }

    /// Encode a `MinuteForecastResponse` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if summary != nil { try? container.encode(summary, forKey: .summary) }
        if intervalSummaries != nil { try? container.encode(intervalSummaries, forKey: .intervalSummaries) }
        if intervals != nil { try? container.encode(intervals, forKey: .intervals) }
    }
}
