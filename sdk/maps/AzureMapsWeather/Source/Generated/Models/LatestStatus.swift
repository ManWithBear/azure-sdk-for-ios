// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// The latest status on the alert in the current area.
public struct LatestStatus: Codable {
    // MARK: Properties

    /// The latest status keyword for the alert, in the specified language. By default, returned in English (en-US).
    public let localized: String?
    /// Latest status keyword for the alert, in English (en-US).
    public let english: LatestStatusKeyword?

    // MARK: Initializers

    /// Initialize a `LatestStatus` structure.
    /// - Parameters:
    ///   - localized: The latest status keyword for the alert, in the specified language. By default, returned in English (en-US).
    ///   - english: Latest status keyword for the alert, in English (en-US).
    public init(
        localized: String? = nil, english: LatestStatusKeyword? = nil
    ) {
        self.localized = localized
        self.english = english
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case localized = "localized"
        case english = "english"
    }

    /// Initialize a `LatestStatus` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.localized = try? container.decode(String.self, forKey: .localized)
        self.english = try? container.decode(LatestStatusKeyword.self, forKey: .english)
    }

    /// Encode a `LatestStatus` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if localized != nil { try? container.encode(localized, forKey: .localized) }
        if english != nil { try? container.encode(english, forKey: .english) }
    }
}
