// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Speed of wind in specified unit.
public struct WindSpeed: Codable {
    // MARK: Properties

    /// Rounded value of the speed.
    public let value: Float?
    /// Type of unit for the speed value.
    public let unit: String?
    /// Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public let unitType: UnitType?

    // MARK: Initializers

    /// Initialize a `WindSpeed` structure.
    /// - Parameters:
    ///   - value: Rounded value of the speed.
    ///   - unit: Type of unit for the speed value.
    ///   - unitType: Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    public init(
        value: Float? = nil, unit: String? = nil, unitType: UnitType? = nil
    ) {
        self.value = value
        self.unit = unit
        self.unitType = unitType
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case value = "value"
        case unit = "unit"
        case unitType = "unitType"
    }

    /// Initialize a `WindSpeed` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.value = try? container.decode(Float.self, forKey: .value)
        self.unit = try? container.decode(String.self, forKey: .unit)
        self.unitType = try? container.decode(UnitType.self, forKey: .unitType)
    }

    /// Encode a `WindSpeed` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if value != nil { try? container.encode(value, forKey: .value) }
        if unit != nil { try? container.encode(unit, forKey: .unit) }
        if unitType != nil { try? container.encode(unitType, forKey: .unitType) }
    }
}
