// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Information about a daily index.
public struct DailyIndex: Codable {
    // MARK: Properties

    /// Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays".
    public let indexName: String?
    /// Numeric ID used to identify the specific index. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios.
    public let indexId: Int32?
    /// Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    public let dateTime: Iso8601Date?
    /// Index value. Ranges from 0.0 to 10.0. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported ranges.
    public let value: Float?
    /// Textual description for `categoryValue` corresponding to the level that the index value falls under, for example "Very Good".
    public let categoryDescription: String?
    /// Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
    public let categoryValue: Int32?
    /// Describes the direction of the `value` and `categoryValue`. For example, when set to `true`, the poorest index value is 0 and the best index value is 10. When set to `true`, the poorest index value is 10 and the best index value is 0.
    public let isAscending: Bool?
    /// A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be "Conditions are excellent for flying!".
    public let description: String?

    // MARK: Initializers

    /// Initialize a `DailyIndex` structure.
    /// - Parameters:
    ///   - indexName: Name of the index, for example, "Construction", "Outdoor Activity", "Flight Delays".
    ///   - indexId: Numeric ID used to identify the specific index. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios.
    ///   - dateTime: Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
    ///   - value: Index value. Ranges from 0.0 to 10.0. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported ranges.
    ///   - categoryDescription: Textual description for `categoryValue` corresponding to the level that the index value falls under, for example "Very Good".
    ///   - categoryValue: Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
    ///   - isAscending: Describes the direction of the `value` and `categoryValue`. For example, when set to `true`, the poorest index value is 0 and the best index value is 10. When set to `true`, the poorest index value is 10 and the best index value is 0.
    ///   - description: A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be "Conditions are excellent for flying!".
    public init(
        indexName: String? = nil, indexId: Int32? = nil, dateTime: Iso8601Date? = nil, value: Float? = nil,
        categoryDescription: String? = nil, categoryValue: Int32? = nil, isAscending: Bool? = nil,
        description: String? = nil
    ) {
        self.indexName = indexName
        self.indexId = indexId
        self.dateTime = dateTime
        self.value = value
        self.categoryDescription = categoryDescription
        self.categoryValue = categoryValue
        self.isAscending = isAscending
        self.description = description
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case indexName = "indexName"
        case indexId = "indexId"
        case dateTime = "dateTime"
        case value = "value"
        case categoryDescription = "category"
        case categoryValue = "categoryValue"
        case isAscending = "ascending"
        case description = "description"
    }

    /// Initialize a `DailyIndex` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.indexName = try? container.decode(String.self, forKey: .indexName)
        self.indexId = try? container.decode(Int32.self, forKey: .indexId)
        self.dateTime = try? container.decode(Iso8601Date.self, forKey: .dateTime)
        self.value = try? container.decode(Float.self, forKey: .value)
        self.categoryDescription = try? container.decode(String.self, forKey: .categoryDescription)
        self.categoryValue = try? container.decode(Int32.self, forKey: .categoryValue)
        self.isAscending = try? container.decode(Bool.self, forKey: .isAscending)
        self.description = try? container.decode(String.self, forKey: .description)
    }

    /// Encode a `DailyIndex` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if indexName != nil { try? container.encode(indexName, forKey: .indexName) }
        if indexId != nil { try? container.encode(indexId, forKey: .indexId) }
        if dateTime != nil { try? container.encode(dateTime, forKey: .dateTime) }
        if value != nil { try? container.encode(value, forKey: .value) }
        if categoryDescription != nil { try? container.encode(categoryDescription, forKey: .categoryDescription) }
        if categoryValue != nil { try? container.encode(categoryValue, forKey: .categoryValue) }
        if isAscending != nil { try? container.encode(isAscending, forKey: .isAscending) }
        if description != nil { try? container.encode(description, forKey: .description) }
    }
}
