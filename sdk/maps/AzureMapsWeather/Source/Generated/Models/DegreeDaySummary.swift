// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct DegreeDaySummary: Codable {
    // MARK: Properties

    /// Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
    public let heating: WeatherValue?
    /// Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
    public let cooling: WeatherValue?

    // MARK: Initializers

    /// Initialize a `DegreeDaySummary` structure.
    /// - Parameters:
    ///   - heating: Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
    ///   - cooling: Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
    public init(
        heating: WeatherValue? = nil, cooling: WeatherValue? = nil
    ) {
        self.heating = heating
        self.cooling = cooling
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case heating = "heating"
        case cooling = "cooling"
    }

    /// Initialize a `DegreeDaySummary` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.heating = try? container.decode(WeatherValue.self, forKey: .heating)
        self.cooling = try? container.decode(WeatherValue.self, forKey: .cooling)
    }

    /// Encode a `DegreeDaySummary` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if heating != nil { try? container.encode(heating, forKey: .heating) }
        if cooling != nil { try? container.encode(cooling, forKey: .cooling) }
    }
}
