// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Precipitation forecast of the weather along the route.
public struct WeatherAlongRoutePrecipitation: Codable {
    // MARK: Properties

    /// The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
    public let dbz: Double?
    /// Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."
    public let type: String?

    // MARK: Initializers

    /// Initialize a `WeatherAlongRoutePrecipitation` structure.
    /// - Parameters:
    ///   - dbz: The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
    ///   - type: Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."
    public init(
        dbz: Double? = nil, type: String? = nil
    ) {
        self.dbz = dbz
        self.type = type
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case dbz = "dbz"
        case type = "type"
    }

    /// Initialize a `WeatherAlongRoutePrecipitation` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.dbz = try? container.decode(Double.self, forKey: .dbz)
        self.type = try? container.decode(String.self, forKey: .type)
    }

    /// Encode a `WeatherAlongRoutePrecipitation` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if dbz != nil { try? container.encode(dbz, forKey: .dbz) }
        if type != nil { try? container.encode(type, forKey: .type) }
    }
}
