// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// This object is returned from a successful Route Matrix call. For ex, if 2 origins and 3 destinations are provided, there are going to 2 arrays with 3 elements in each. Each element's content depends on the options provided in the query.
public struct RouteMatrixResult: Codable {
    // MARK: Properties

    /// Format Version property
    public let formatVersion: String?
    /// Results as a 2 dimensional array of route summaries.
    public let matrix: [[RouteMatrix]]?
    /// Summary object
    public let summary: RouteMatrixSummary?

    // MARK: Initializers

    /// Initialize a `RouteMatrixResult` structure.
    /// - Parameters:
    ///   - formatVersion: Format Version property
    ///   - matrix: Results as a 2 dimensional array of route summaries.
    ///   - summary: Summary object
    public init(
        formatVersion: String? = nil, matrix: [[RouteMatrix]]? = nil, summary: RouteMatrixSummary? = nil
    ) {
        self.formatVersion = formatVersion
        self.matrix = matrix
        self.summary = summary
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case formatVersion = "formatVersion"
        case matrix = "matrix"
        case summary = "summary"
    }

    /// Initialize a `RouteMatrixResult` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.formatVersion = try? container.decode(String.self, forKey: .formatVersion)
        self.matrix = try? container.decode([[RouteMatrix]].self, forKey: .matrix)
        self.summary = try? container.decode(RouteMatrixSummary.self, forKey: .summary)
    }

    /// Encode a `RouteMatrixResult` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if formatVersion != nil { try? container.encode(formatVersion, forKey: .formatVersion) }
        if matrix != nil { try? container.encode(matrix, forKey: .matrix) }
        if summary != nil { try? container.encode(summary, forKey: .summary) }
    }
}
