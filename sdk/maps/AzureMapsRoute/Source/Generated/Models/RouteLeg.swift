// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// A description of a part of a route, comprised of a list of points. Each additional waypoint provided in the request will result in an additional leg in the returned route.
public struct RouteLeg: Codable, Swift.Error {
    // MARK: Properties

    /// Summary object for route section.
    public let summary: RouteLegSummary?
    /// Points array
    public let points: [LatLongPair]?

    // MARK: Initializers

    /// Initialize a `RouteLeg` structure.
    /// - Parameters:
    ///   - summary: Summary object for route section.
    ///   - points: Points array
    public init(
        summary: RouteLegSummary? = nil, points: [LatLongPair]? = nil
    ) {
        self.summary = summary
        self.points = points
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case summary = "summary"
        case points = "points"
    }

    /// Initialize a `RouteLeg` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.summary = try? container.decode(RouteLegSummary.self, forKey: .summary)
        self.points = try? container.decode([LatLongPair].self, forKey: .points)
    }

    /// Encode a `RouteLeg` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if summary != nil { try? container.encode(summary, forKey: .summary) }
        if points != nil { try? container.encode(points, forKey: .points) }
    }
}
