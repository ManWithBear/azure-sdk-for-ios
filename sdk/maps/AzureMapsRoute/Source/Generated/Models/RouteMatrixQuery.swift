// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// An object with a matrix of coordinates.
public struct RouteMatrixQuery: Codable {
    // MARK: Properties

    /// A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    public let origins: GeoJsonMultiPoint?
    /// A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    public let destinations: GeoJsonMultiPoint?

    // MARK: Initializers

    /// Initialize a `RouteMatrixQuery` structure.
    /// - Parameters:
    ///   - origins: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    ///   - destinations: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    public init(
        origins: GeoJsonMultiPoint? = nil, destinations: GeoJsonMultiPoint? = nil
    ) {
        self.origins = origins
        self.destinations = destinations
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case origins = "origins"
        case destinations = "destinations"
    }

    /// Initialize a `RouteMatrixQuery` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.origins = try? container.decode(GeoJsonMultiPoint.self, forKey: .origins)
        self.destinations = try? container.decode(GeoJsonMultiPoint.self, forKey: .destinations)
    }

    /// Encode a `RouteMatrixQuery` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if origins != nil { try? container.encode(origins, forKey: .origins) }
        if destinations != nil { try? container.encode(destinations, forKey: .destinations) }
    }
}
