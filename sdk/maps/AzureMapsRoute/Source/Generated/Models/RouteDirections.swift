// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// This object is returned from a successful Route Directions call
public struct RouteDirections: Codable {
    // MARK: Properties

    /// Format Version property
    public let formatVersion: String?
    /// Routes array
    public let routes: [RouteEntity]?
    /// Optimized sequence of waypoints. It shows the index from the user provided waypoint sequence for the original and optimized list. For instance, a response:
    /// ```
    /// <optimizedWaypoints>
    /// <waypoint providedIndex="0" optimizedIndex="1"/>
    /// <waypoint providedIndex="1" optimizedIndex="2"/>
    /// <waypoint providedIndex="2" optimizedIndex="0"/>
    /// </optimizedWaypoints>
    /// ```
    /// means that the original sequence is [0, 1, 2] and optimized sequence is [1, 2, 0]. Since the index starts by 0 the original is "first, second, third" while the optimized is "second, third, first".
    public let optimizedWaypoints: [RouteOptimizedWaypoint]?
    /// Reports the effective settings used in the current call.
    public let report: RouteReport?

    // MARK: Initializers

    /// Initialize a `RouteDirections` structure.
    /// - Parameters:
    ///   - formatVersion: Format Version property
    ///   - routes: Routes array
    ///   - optimizedWaypoints: Optimized sequence of waypoints. It shows the index from the user provided waypoint sequence for the original and optimized list. For instance, a response:
    /// ```
    /// <optimizedWaypoints>
    /// <waypoint providedIndex="0" optimizedIndex="1"/>
    /// <waypoint providedIndex="1" optimizedIndex="2"/>
    /// <waypoint providedIndex="2" optimizedIndex="0"/>
    /// </optimizedWaypoints>
    /// ```
    /// means that the original sequence is [0, 1, 2] and optimized sequence is [1, 2, 0]. Since the index starts by 0 the original is "first, second, third" while the optimized is "second, third, first".
    ///   - report: Reports the effective settings used in the current call.
    public init(
        formatVersion: String? = nil, routes: [RouteEntity]? = nil, optimizedWaypoints: [RouteOptimizedWaypoint]? = nil,
        report: RouteReport? = nil
    ) {
        self.formatVersion = formatVersion
        self.routes = routes
        self.optimizedWaypoints = optimizedWaypoints
        self.report = report
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case formatVersion = "formatVersion"
        case routes = "routes"
        case optimizedWaypoints = "optimizedWaypoints"
        case report = "report"
    }

    /// Initialize a `RouteDirections` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.formatVersion = try? container.decode(String.self, forKey: .formatVersion)
        self.routes = try? container.decode([RouteEntity].self, forKey: .routes)
        self.optimizedWaypoints = try? container.decode([RouteOptimizedWaypoint].self, forKey: .optimizedWaypoints)
        self.report = try? container.decode(RouteReport.self, forKey: .report)
    }

    /// Encode a `RouteDirections` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if formatVersion != nil { try? container.encode(formatVersion, forKey: .formatVersion) }
        if routes != nil { try? container.encode(routes, forKey: .routes) }
        if optimizedWaypoints != nil { try? container.encode(optimizedWaypoints, forKey: .optimizedWaypoints) }
        if report != nil { try? container.encode(report, forKey: .report) }
    }
}
