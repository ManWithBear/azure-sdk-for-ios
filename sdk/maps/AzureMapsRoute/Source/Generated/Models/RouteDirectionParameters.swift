// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Post body parameters for Route directions.
public struct RouteDirectionParameters: Codable {
    // MARK: Properties

    /// A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.
    ///   - The provided sequence of supporting points is used as input for route reconstruction.
    ///   - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.
    ///   - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are
    ///   expected to be at (or very near) the beginning and end of the reference route, respectively.
    ///   - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.
    ///   - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are
    ///   ignored for the calculation of the reference route's travel time and traffic delay.
    ///  Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points) for details.
    public let supportingPoints: GeoJsonGeometryCollection?
    /// This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE". Toll roads with vignettes in countries not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.
    public let avoidVignette: [String]?
    /// This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying **allowVignette** with some countries X is equivalent to specifying **avoidVignette** with all countries but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.
    public let allowVignette: [String]?
    /// A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum number of avoided areas is **10**. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.
    public let avoidAreas: GeoJsonMultiPolygon?

    // MARK: Initializers

    /// Initialize a `RouteDirectionParameters` structure.
    /// - Parameters:
    ///   - supportingPoints: A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.
    ///   - The provided sequence of supporting points is used as input for route reconstruction.
    ///   - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.
    ///   - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are
    ///   expected to be at (or very near) the beginning and end of the reference route, respectively.
    ///   - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.
    ///   - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are
    ///   ignored for the calculation of the reference route's travel time and traffic delay.
    ///  Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points) for details.
    ///   - avoidVignette: This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE". Toll roads with vignettes in countries not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.
    ///   - allowVignette: This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying **allowVignette** with some countries X is equivalent to specifying **avoidVignette** with all countries but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.
    ///   - avoidAreas: A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum number of avoided areas is **10**. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.
    public init(
        supportingPoints: GeoJsonGeometryCollection? = nil, avoidVignette: [String]? = nil,
        allowVignette: [String]? = nil,
        avoidAreas: GeoJsonMultiPolygon? = nil
    ) {
        self.supportingPoints = supportingPoints
        self.avoidVignette = avoidVignette
        self.allowVignette = allowVignette
        self.avoidAreas = avoidAreas
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case supportingPoints = "supportingPoints"
        case avoidVignette = "avoidVignette"
        case allowVignette = "allowVignette"
        case avoidAreas = "avoidAreas"
    }

    /// Initialize a `RouteDirectionParameters` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.supportingPoints = try? container.decode(GeoJsonGeometryCollection.self, forKey: .supportingPoints)
        self.avoidVignette = try? container.decode([String].self, forKey: .avoidVignette)
        self.allowVignette = try? container.decode([String].self, forKey: .allowVignette)
        self.avoidAreas = try? container.decode(GeoJsonMultiPolygon.self, forKey: .avoidAreas)
    }

    /// Encode a `RouteDirectionParameters` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if supportingPoints != nil { try? container.encode(supportingPoints, forKey: .supportingPoints) }
        if avoidVignette != nil { try? container.encode(avoidVignette, forKey: .avoidVignette) }
        if allowVignette != nil { try? container.encode(allowVignette, forKey: .allowVignette) }
        if avoidAreas != nil { try? container.encode(avoidAreas, forKey: .avoidAreas) }
    }
}
