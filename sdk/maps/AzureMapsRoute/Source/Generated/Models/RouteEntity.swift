// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct RouteEntity: Codable, Swift.Error {
    // MARK: Properties

    /// Summary object
    public let summary: RouteSummary?
    /// Legs array
    public let legs: [RouteLeg]?
    /// Sections array
    public let sections: [RouteSection]?
    /// Contains guidance related elements. This field is present only when guidance was requested and is available.
    public let guidance: RouteGuidance?

    // MARK: Initializers

    /// Initialize a `RouteEntity` structure.
    /// - Parameters:
    ///   - summary: Summary object
    ///   - legs: Legs array
    ///   - sections: Sections array
    ///   - guidance: Contains guidance related elements. This field is present only when guidance was requested and is available.
    public init(
        summary: RouteSummary? = nil, legs: [RouteLeg]? = nil, sections: [RouteSection]? = nil,
        guidance: RouteGuidance? = nil
    ) {
        self.summary = summary
        self.legs = legs
        self.sections = sections
        self.guidance = guidance
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case summary = "summary"
        case legs = "legs"
        case sections = "sections"
        case guidance = "guidance"
    }

    /// Initialize a `RouteEntity` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.summary = try? container.decode(RouteSummary.self, forKey: .summary)
        self.legs = try? container.decode([RouteLeg].self, forKey: .legs)
        self.sections = try? container.decode([RouteSection].self, forKey: .sections)
        self.guidance = try? container.decode(RouteGuidance.self, forKey: .guidance)
    }

    /// Encode a `RouteEntity` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if summary != nil { try? container.encode(summary, forKey: .summary) }
        if legs != nil { try? container.encode(legs, forKey: .legs) }
        if sections != nil { try? container.encode(sections, forKey: .sections) }
        if guidance != nil { try? container.encode(guidance, forKey: .guidance) }
    }
}
