// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Optimized way point object.
public struct RouteOptimizedWaypoint: Codable, Swift.Error {
    // MARK: Properties

    /// Way point index provided by the user.
    public let providedIndex: Int32?
    /// Optimized way point index from the system.
    public let optimizedIndex: Int32?

    // MARK: Initializers

    /// Initialize a `RouteOptimizedWaypoint` structure.
    /// - Parameters:
    ///   - providedIndex: Way point index provided by the user.
    ///   - optimizedIndex: Optimized way point index from the system.
    public init(
        providedIndex: Int32? = nil, optimizedIndex: Int32? = nil
    ) {
        self.providedIndex = providedIndex
        self.optimizedIndex = optimizedIndex
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case providedIndex = "providedIndex"
        case optimizedIndex = "optimizedIndex"
    }

    /// Initialize a `RouteOptimizedWaypoint` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.providedIndex = try? container.decode(Int32.self, forKey: .providedIndex)
        self.optimizedIndex = try? container.decode(Int32.self, forKey: .optimizedIndex)
    }

    /// Encode a `RouteOptimizedWaypoint` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if providedIndex != nil { try? container.encode(providedIndex, forKey: .providedIndex) }
        if optimizedIndex != nil { try? container.encode(optimizedIndex, forKey: .optimizedIndex) }
    }
}
