// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Contains guidance related elements. This field is present only when guidance was requested and is available.
public struct RouteGuidance: Codable, Swift.Error {
    // MARK: Properties

    /// A list of instructions describing maneuvers.
    public let instructions: [RouteInstruction]?
    /// Groups a sequence of instruction elements which are related to each other.
    public let instructionGroups: [RouteInstructionGroup]?

    // MARK: Initializers

    /// Initialize a `RouteGuidance` structure.
    /// - Parameters:
    ///   - instructions: A list of instructions describing maneuvers.
    ///   - instructionGroups: Groups a sequence of instruction elements which are related to each other.
    public init(
        instructions: [RouteInstruction]? = nil, instructionGroups: [RouteInstructionGroup]? = nil
    ) {
        self.instructions = instructions
        self.instructionGroups = instructionGroups
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case instructions = "instructions"
        case instructionGroups = "instructionGroups"
    }

    /// Initialize a `RouteGuidance` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.instructions = try? container.decode([RouteInstruction].self, forKey: .instructions)
        self.instructionGroups = try? container.decode([RouteInstructionGroup].self, forKey: .instructionGroups)
    }

    /// Encode a `RouteGuidance` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if instructions != nil { try? container.encode(instructions, forKey: .instructions) }
        if instructionGroups != nil { try? container.encode(instructionGroups, forKey: .instructionGroups) }
    }
}
