// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Reachable Range
public struct RouteRange: Codable {
    // MARK: Properties

    /// Center point of the reachable range
    public let center: LatLongPair?
    /// Polygon boundary of the reachable range represented as a list of points.
    public let boundary: [LatLongPair]?

    // MARK: Initializers

    /// Initialize a `RouteRange` structure.
    /// - Parameters:
    ///   - center: Center point of the reachable range
    ///   - boundary: Polygon boundary of the reachable range represented as a list of points.
    public init(
        center: LatLongPair? = nil, boundary: [LatLongPair]? = nil
    ) {
        self.center = center
        self.boundary = boundary
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case center = "center"
        case boundary = "boundary"
    }

    /// Initialize a `RouteRange` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.center = try? container.decode(LatLongPair.self, forKey: .center)
        self.boundary = try? container.decode([LatLongPair].self, forKey: .boundary)
    }

    /// Encode a `RouteRange` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if center != nil { try? container.encode(center, forKey: .center) }
        if boundary != nil { try? container.encode(boundary, forKey: .boundary) }
    }
}
