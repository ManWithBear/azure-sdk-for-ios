// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct TimezoneId: Codable {
    // MARK: Properties

    /// Id property
    public let id: String?
    /// An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.
    /// Note: may be null.
    public let aliases: [String]?
    /// An array of country records. Only returned when [options]=*zoneinfo* or *all*.
    public let countries: [CountryRecord]?
    /// Timezone names object.
    public let names: TimezoneNames?
    /// Details in effect at the local time.
    public let referenceTime: ReferenceTime?
    /// Representative point property
    public let representativePoint: RepresentativePoint?
    /// Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
    public let timeTransitions: [TimeTransition]?

    // MARK: Initializers

    /// Initialize a `TimezoneId` structure.
    /// - Parameters:
    ///   - id: Id property
    ///   - aliases: An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.
    /// Note: may be null.
    ///   - countries: An array of country records. Only returned when [options]=*zoneinfo* or *all*.
    ///   - names: Timezone names object.
    ///   - referenceTime: Details in effect at the local time.
    ///   - representativePoint: Representative point property
    ///   - timeTransitions: Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
    public init(
        id: String? = nil, aliases: [String]? = nil, countries: [CountryRecord]? = nil, names: TimezoneNames? = nil,
        referenceTime: ReferenceTime? = nil, representativePoint: RepresentativePoint? = nil,
        timeTransitions: [TimeTransition]? = nil
    ) {
        self.id = id
        self.aliases = aliases
        self.countries = countries
        self.names = names
        self.referenceTime = referenceTime
        self.representativePoint = representativePoint
        self.timeTransitions = timeTransitions
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case aliases = "Aliases"
        case countries = "Countries"
        case names = "Names"
        case referenceTime = "ReferenceTime"
        case representativePoint = "RepresentativePoint"
        case timeTransitions = "TimeTransitions"
    }

    /// Initialize a `TimezoneId` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(String.self, forKey: .id)
        self.aliases = try? container.decode([String].self, forKey: .aliases)
        self.countries = try? container.decode([CountryRecord].self, forKey: .countries)
        self.names = try? container.decode(TimezoneNames.self, forKey: .names)
        self.referenceTime = try? container.decode(ReferenceTime.self, forKey: .referenceTime)
        self.representativePoint = try? container.decode(RepresentativePoint.self, forKey: .representativePoint)
        self.timeTransitions = try? container.decode([TimeTransition].self, forKey: .timeTransitions)
    }

    /// Encode a `TimezoneId` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if aliases != nil { try? container.encode(aliases, forKey: .aliases) }
        if countries != nil { try? container.encode(countries, forKey: .countries) }
        if names != nil { try? container.encode(names, forKey: .names) }
        if referenceTime != nil { try? container.encode(referenceTime, forKey: .referenceTime) }
        if representativePoint != nil { try? container.encode(representativePoint, forKey: .representativePoint) }
        if timeTransitions != nil { try? container.encode(timeTransitions, forKey: .timeTransitions) }
    }
}
