// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct TimezoneWindows: Codable {
    // MARK: Properties

    /// Windows Id property
    public let windowsId: String?
    /// Territory property
    public let territory: String?
    /// IanaIds array
    public let ianaIds: [String]?

    // MARK: Initializers

    /// Initialize a `TimezoneWindows` structure.
    /// - Parameters:
    ///   - windowsId: Windows Id property
    ///   - territory: Territory property
    ///   - ianaIds: IanaIds array
    public init(
        windowsId: String? = nil, territory: String? = nil, ianaIds: [String]? = nil
    ) {
        self.windowsId = windowsId
        self.territory = territory
        self.ianaIds = ianaIds
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case windowsId = "WindowsId"
        case territory = "Territory"
        case ianaIds = "IanaIds"
    }

    /// Initialize a `TimezoneWindows` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.windowsId = try? container.decode(String.self, forKey: .windowsId)
        self.territory = try? container.decode(String.self, forKey: .territory)
        self.ianaIds = try? container.decode([String].self, forKey: .ianaIds)
    }

    /// Encode a `TimezoneWindows` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if windowsId != nil { try? container.encode(windowsId, forKey: .windowsId) }
        if territory != nil { try? container.encode(territory, forKey: .territory) }
        if ianaIds != nil { try? container.encode(ianaIds, forKey: .ianaIds) }
    }
}
