// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Timezone names object.
public struct TimezoneNames: Codable {
    // MARK: Properties

    /// The ISO 639-1 language code of the Names
    public let ISO6391LanguageCode: String?
    /// Generic Name
    public let generic: String?
    /// Standard Name
    public let standard: String?
    /// Daylight Name
    public let daylight: String?

    // MARK: Initializers

    /// Initialize a `TimezoneNames` structure.
    /// - Parameters:
    ///   - ISO6391LanguageCode: The ISO 639-1 language code of the Names
    ///   - generic: Generic Name
    ///   - standard: Standard Name
    ///   - daylight: Daylight Name
    public init(
        ISO6391LanguageCode: String? = nil, generic: String? = nil, standard: String? = nil, daylight: String? = nil
    ) {
        self.ISO6391LanguageCode = ISO6391LanguageCode
        self.generic = generic
        self.standard = standard
        self.daylight = daylight
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case ISO6391LanguageCode = "ISO6391LanguageCode"
        case generic = "Generic"
        case standard = "Standard"
        case daylight = "Daylight"
    }

    /// Initialize a `TimezoneNames` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.ISO6391LanguageCode = try? container.decode(String.self, forKey: .ISO6391LanguageCode)
        self.generic = try? container.decode(String.self, forKey: .generic)
        self.standard = try? container.decode(String.self, forKey: .standard)
        self.daylight = try? container.decode(String.self, forKey: .daylight)
    }

    /// Encode a `TimezoneNames` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if ISO6391LanguageCode != nil { try? container.encode(ISO6391LanguageCode, forKey: .ISO6391LanguageCode) }
        if generic != nil { try? container.encode(generic, forKey: .generic) }
        if standard != nil { try? container.encode(standard, forKey: .standard) }
        if daylight != nil { try? container.encode(daylight, forKey: .daylight) }
    }
}
