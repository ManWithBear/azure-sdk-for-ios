// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Details in effect at the local time.
public struct ReferenceTime: Codable {
    // MARK: Properties

    /// Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
    public let tag: String?
    /// UTC offset in effect at the `ReferenceUTCTimestamp`.
    public let standardOffset: String?
    /// Time saving in minutes in effect at the `ReferenceUTCTimestamp`.
    public let daylightSavings: String?
    /// Current wall time at the given time zone as shown in the `Tag` property.
    public let wallTime: String?
    /// The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
    public let posixTzValidYear: Int32?
    /// POSIX string used to set the time zone environment variable.
    public let posixTz: String?
    /// Sunrise at the given time zone as shown in the `Tag` property. The sunrise is described in the ISO8601 format. (Only be populated if the call is byCoordinates)
    public let sunrise: Iso8601Date?
    /// Sunset at the given time zone as shown in the `Tag` property. The sunset is described in the ISO8601 format.(Only be populated if the call is byCoordinates)
    public let sunset: Iso8601Date?

    // MARK: Initializers

    /// Initialize a `ReferenceTime` structure.
    /// - Parameters:
    ///   - tag: Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
    ///   - standardOffset: UTC offset in effect at the `ReferenceUTCTimestamp`.
    ///   - daylightSavings: Time saving in minutes in effect at the `ReferenceUTCTimestamp`.
    ///   - wallTime: Current wall time at the given time zone as shown in the `Tag` property.
    ///   - posixTzValidYear: The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
    ///   - posixTz: POSIX string used to set the time zone environment variable.
    ///   - sunrise: Sunrise at the given time zone as shown in the `Tag` property. The sunrise is described in the ISO8601 format. (Only be populated if the call is byCoordinates)
    ///   - sunset: Sunset at the given time zone as shown in the `Tag` property. The sunset is described in the ISO8601 format.(Only be populated if the call is byCoordinates)
    public init(
        tag: String? = nil, standardOffset: String? = nil, daylightSavings: String? = nil, wallTime: String? = nil,
        posixTzValidYear: Int32? = nil, posixTz: String? = nil, sunrise: Iso8601Date? = nil,
        sunset: Iso8601Date? = nil
    ) {
        self.tag = tag
        self.standardOffset = standardOffset
        self.daylightSavings = daylightSavings
        self.wallTime = wallTime
        self.posixTzValidYear = posixTzValidYear
        self.posixTz = posixTz
        self.sunrise = sunrise
        self.sunset = sunset
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case tag = "Tag"
        case standardOffset = "StandardOffset"
        case daylightSavings = "DaylightSavings"
        case wallTime = "WallTime"
        case posixTzValidYear = "PosixTzValidYear"
        case posixTz = "PosixTz"
        case sunrise = "Sunrise"
        case sunset = "Sunset"
    }

    /// Initialize a `ReferenceTime` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.tag = try? container.decode(String.self, forKey: .tag)
        self.standardOffset = try? container.decode(String.self, forKey: .standardOffset)
        self.daylightSavings = try? container.decode(String.self, forKey: .daylightSavings)
        self.wallTime = try? container.decode(String.self, forKey: .wallTime)
        self.posixTzValidYear = try? container.decode(Int32.self, forKey: .posixTzValidYear)
        self.posixTz = try? container.decode(String.self, forKey: .posixTz)
        self.sunrise = try? container.decode(Iso8601Date.self, forKey: .sunrise)
        self.sunset = try? container.decode(Iso8601Date.self, forKey: .sunset)
    }

    /// Encode a `ReferenceTime` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if tag != nil { try? container.encode(tag, forKey: .tag) }
        if standardOffset != nil { try? container.encode(standardOffset, forKey: .standardOffset) }
        if daylightSavings != nil { try? container.encode(daylightSavings, forKey: .daylightSavings) }
        if wallTime != nil { try? container.encode(wallTime, forKey: .wallTime) }
        if posixTzValidYear != nil { try? container.encode(posixTzValidYear, forKey: .posixTzValidYear) }
        if posixTz != nil { try? container.encode(posixTz, forKey: .posixTz) }
        if sunrise != nil { try? container.encode(sunrise, forKey: .sunrise) }
        if sunset != nil { try? container.encode(sunset, forKey: .sunset) }
    }
}
