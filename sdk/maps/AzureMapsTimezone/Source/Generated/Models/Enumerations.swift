// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation

public enum TimezoneOptions: RequestStringConvertible, Codable, Equatable {
    /// Custom value for unrecognized enum values
    case custom(String)
    /// Do not include zoneinfo or transitions in the result.
    case none
    /// Include additional time zone info in the result.
    case zoneInfo
    /// Include transition information in the result (The number of transitions is currently capped at 250).
    case transitions
    /// Include both zoneinfo and transitions in the result.
    case all

    public var requestString: String {
        switch self {
        case let .custom(val):
            return val
        case .none:
            return "none"
        case .zoneInfo:
            return "zoneInfo"
        case .transitions:
            return "transitions"
        case .all:
            return "all"
        }
    }

    public init(_ val: String) {
        switch val.lowercased() {
        case "none":
            self = .none
        case "zoneinfo":
            self = .zoneInfo
        case "transitions":
            self = .transitions
        case "all":
            self = .all
        default:
            self = .custom(val)
        }
    }

    // MARK: Codable

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let value = try container.decode(String.self)
        self.init(value)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(requestString)
    }
}

public enum JsonFormat: RequestStringConvertible, Codable, Equatable {
    /// Custom value for unrecognized enum values
    case custom(String)
    /// [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
    case json

    public var requestString: String {
        switch self {
        case let .custom(val):
            return val
        case .json:
            return "json"
        }
    }

    public init(_ val: String) {
        switch val.lowercased() {
        case "json":
            self = .json
        default:
            self = .custom(val)
        }
    }

    // MARK: Codable

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let value = try container.decode(String.self)
        self.init(value)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(requestString)
    }
}
