// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct TimeTransition: Codable {
    // MARK: Properties

    /// Tag property
    public let tag: String?
    /// StandardOffset property
    public let standardOffset: String?
    /// DaylightSavings property
    public let daylightSavings: String?
    /// Start date, start time for this transition period
    public let utcStart: Iso8601Date?
    /// End date, end time for this transition period
    public let utcEnd: Iso8601Date?

    // MARK: Initializers

    /// Initialize a `TimeTransition` structure.
    /// - Parameters:
    ///   - tag: Tag property
    ///   - standardOffset: StandardOffset property
    ///   - daylightSavings: DaylightSavings property
    ///   - utcStart: Start date, start time for this transition period
    ///   - utcEnd: End date, end time for this transition period
    public init(
        tag: String? = nil, standardOffset: String? = nil, daylightSavings: String? = nil, utcStart: Iso8601Date? = nil,
        utcEnd: Iso8601Date? = nil
    ) {
        self.tag = tag
        self.standardOffset = standardOffset
        self.daylightSavings = daylightSavings
        self.utcStart = utcStart
        self.utcEnd = utcEnd
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case tag = "Tag"
        case standardOffset = "StandardOffset"
        case daylightSavings = "DaylightSavings"
        case utcStart = "UtcStart"
        case utcEnd = "UtcEnd"
    }

    /// Initialize a `TimeTransition` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.tag = try? container.decode(String.self, forKey: .tag)
        self.standardOffset = try? container.decode(String.self, forKey: .standardOffset)
        self.daylightSavings = try? container.decode(String.self, forKey: .daylightSavings)
        self.utcStart = try? container.decode(Iso8601Date.self, forKey: .utcStart)
        self.utcEnd = try? container.decode(Iso8601Date.self, forKey: .utcEnd)
    }

    /// Encode a `TimeTransition` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if tag != nil { try? container.encode(tag, forKey: .tag) }
        if standardOffset != nil { try? container.encode(standardOffset, forKey: .standardOffset) }
        if daylightSavings != nil { try? container.encode(daylightSavings, forKey: .daylightSavings) }
        if utcStart != nil { try? container.encode(utcStart, forKey: .utcStart) }
        if utcEnd != nil { try? container.encode(utcEnd, forKey: .utcEnd) }
    }
}
