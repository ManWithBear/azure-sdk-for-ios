// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct IanaId: Codable {
    // MARK: Properties

    /// Id property
    public let id: String?
    /// IsAlias property
    public let IsAlias: Bool?
    /// AliasOf property
    public let aliasOf: String?
    /// This attribute returns `True` if the IanaId has any country/zone associated with it.
    public let hasZone1970Location: Bool?

    // MARK: Initializers

    /// Initialize a `IanaId` structure.
    /// - Parameters:
    ///   - id: Id property
    ///   - IsAlias: IsAlias property
    ///   - aliasOf: AliasOf property
    ///   - hasZone1970Location: This attribute returns `True` if the IanaId has any country/zone associated with it.
    public init(
        id: String? = nil, IsAlias: Bool? = nil, aliasOf: String? = nil, hasZone1970Location: Bool? = nil
    ) {
        self.id = id
        self.IsAlias = IsAlias
        self.aliasOf = aliasOf
        self.hasZone1970Location = hasZone1970Location
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id = "Id"
        case IsAlias = "IsAlias"
        case aliasOf = "AliasOf"
        case hasZone1970Location = "HasZone1970Location"
    }

    /// Initialize a `IanaId` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(String.self, forKey: .id)
        self.IsAlias = try? container.decode(Bool.self, forKey: .IsAlias)
        self.aliasOf = try? container.decode(String.self, forKey: .aliasOf)
        self.hasZone1970Location = try? container.decode(Bool.self, forKey: .hasZone1970Location)
    }

    /// Encode a `IanaId` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if IsAlias != nil { try? container.encode(IsAlias, forKey: .IsAlias) }
        if aliasOf != nil { try? container.encode(aliasOf, forKey: .aliasOf) }
        if hasZone1970Location != nil { try? container.encode(hasZone1970Location, forKey: .hasZone1970Location) }
    }
}
