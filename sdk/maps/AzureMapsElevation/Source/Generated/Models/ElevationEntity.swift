// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// The elevation data.
public struct ElevationEntity: Codable {
    // MARK: Properties

    /// A location represented as a latitude and longitude.
    public let coordinate: LatLongPair?
    /// The elevation value in meters.
    public let elevationInMeter: Float?

    // MARK: Initializers

    /// Initialize a `ElevationEntity` structure.
    /// - Parameters:
    ///   - coordinate: A location represented as a latitude and longitude.
    ///   - elevationInMeter: The elevation value in meters.
    public init(
        coordinate: LatLongPair? = nil, elevationInMeter: Float? = nil
    ) {
        self.coordinate = coordinate
        self.elevationInMeter = elevationInMeter
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case coordinate = "coordinate"
        case elevationInMeter = "elevationInMeter"
    }

    /// Initialize a `ElevationEntity` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.coordinate = try? container.decode(LatLongPair.self, forKey: .coordinate)
        self.elevationInMeter = try? container.decode(Float.self, forKey: .elevationInMeter)
    }

    /// Encode a `ElevationEntity` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if coordinate != nil { try? container.encode(coordinate, forKey: .coordinate) }
        if elevationInMeter != nil { try? container.encode(elevationInMeter, forKey: .elevationInMeter) }
    }
}
