// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// This object is returned from a successful call to IP Address to country/region API
public struct IpAddressToLocationResult: Codable {
    // MARK: Properties

    /// The object containing the country/region information.
    public let countryRegion: CountryRegion?
    /// The IP Address of the request.
    public let ipAddress: String?

    // MARK: Initializers

    /// Initialize a `IpAddressToLocationResult` structure.
    /// - Parameters:
    ///   - countryRegion: The object containing the country/region information.
    ///   - ipAddress: The IP Address of the request.
    public init(
        countryRegion: CountryRegion? = nil, ipAddress: String? = nil
    ) {
        self.countryRegion = countryRegion
        self.ipAddress = ipAddress
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case countryRegion = "countryRegion"
        case ipAddress = "ipAddress"
    }

    /// Initialize a `IpAddressToLocationResult` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.countryRegion = try? container.decode(CountryRegion.self, forKey: .countryRegion)
        self.ipAddress = try? container.decode(String.self, forKey: .ipAddress)
    }

    /// Encode a `IpAddressToLocationResult` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if countryRegion != nil { try? container.encode(countryRegion, forKey: .countryRegion) }
        if ipAddress != nil { try? container.encode(ipAddress, forKey: .ipAddress) }
    }
}
