// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// The object containing the country/region information.
public struct CountryRegion: Codable {
    // MARK: Properties

    /// The IP Address's 2-character code [(ISO 3166-1)](https://www.iso.org/iso-3166-country-codes.html) of the country or region. Please note, IP address in ranges reserved for special purpose will return Null for country/region.
    public let isoCode: String?

    // MARK: Initializers

    /// Initialize a `CountryRegion` structure.
    /// - Parameters:
    ///   - isoCode: The IP Address's 2-character code [(ISO 3166-1)](https://www.iso.org/iso-3166-country-codes.html) of the country or region. Please note, IP address in ranges reserved for special purpose will return Null for country/region.
    public init(
        isoCode: String? = nil
    ) {
        self.isoCode = isoCode
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case isoCode = "isoCode"
    }

    /// Initialize a `CountryRegion` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.isoCode = try? container.decode(String.self, forKey: .isoCode)
    }

    /// Encode a `CountryRegion` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if isoCode != nil { try? container.encode(isoCode, forKey: .isoCode) }
    }
}
