// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Result object for a Search Address Reverse Cross Street response
public struct ReverseSearchCrossStreetAddressResultItem: Codable {
    // MARK: Properties

    /// The address of the result
    public let address: Address?
    /// Position property in the form of "{latitude},{longitude}"
    public let position: String?

    // MARK: Initializers

    /// Initialize a `ReverseSearchCrossStreetAddressResultItem` structure.
    /// - Parameters:
    ///   - address: The address of the result
    ///   - position: Position property in the form of "{latitude},{longitude}"
    public init(
        address: Address? = nil, position: String? = nil
    ) {
        self.address = address
        self.position = position
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case address = "address"
        case position = "position"
    }

    /// Initialize a `ReverseSearchCrossStreetAddressResultItem` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.address = try? container.decode(Address.self, forKey: .address)
        self.position = try? container.decode(String.self, forKey: .position)
    }

    /// Encode a `ReverseSearchCrossStreetAddressResultItem` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if address != nil { try? container.encode(address, forKey: .address) }
        if position != nil { try? container.encode(position, forKey: .position) }
    }
}
