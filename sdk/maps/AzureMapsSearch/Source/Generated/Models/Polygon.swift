// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct Polygon: Codable {
    // MARK: Properties

    /// ID of the returned entity
    public let providerID: String?
    /// Reason for the failure to obtain data for this provider.
    public let error: String?
    /// Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present.
    public let geometryData: GeoJsonObject?

    // MARK: Initializers

    /// Initialize a `Polygon` structure.
    /// - Parameters:
    ///   - providerID: ID of the returned entity
    ///   - error: Reason for the failure to obtain data for this provider.
    ///   - geometryData: Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if "error" is not present.
    public init(
        providerID: String? = nil, error: String? = nil, geometryData: GeoJsonObject? = nil
    ) {
        self.providerID = providerID
        self.error = error
        self.geometryData = geometryData
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case providerID = "providerID"
        case error = "error"
        case geometryData = "geometryData"
    }

    /// Initialize a `Polygon` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.providerID = try? container.decode(String.self, forKey: .providerID)
        self.error = try? container.decode(String.self, forKey: .error)
        self.geometryData = try? container.decode(GeoJsonObject.self, forKey: .geometryData)
    }

    /// Encode a `Polygon` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if providerID != nil { try? container.encode(providerID, forKey: .providerID) }
        if error != nil { try? container.encode(error, forKey: .error) }
        if geometryData != nil { try? container.encode(geometryData, forKey: .geometryData) }
    }
}
