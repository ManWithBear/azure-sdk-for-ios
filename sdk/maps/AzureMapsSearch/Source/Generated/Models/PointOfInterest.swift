// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Details of the returned POI including information such as the name, phone, url address, and classifications.
public struct PointOfInterest: Codable, Swift.Error {
    // MARK: Properties

    /// Name of the POI property
    public let name: String?
    /// Telephone number property
    public let phone: String?
    /// Website URL property
    public let url: String?
    /// The list of the most specific POI categories
    public let categorySet: [PointOfInterestCategorySet]?
    /// Classification array
    public let classifications: [Classification]?
    /// Brands array. The name of the brand for the POI being returned.
    public let brands: [BrandName]?
    /// Opening hours for a POI (Points of Interest).
    public let operatingHours: OperatingHours?

    // MARK: Initializers

    /// Initialize a `PointOfInterest` structure.
    /// - Parameters:
    ///   - name: Name of the POI property
    ///   - phone: Telephone number property
    ///   - url: Website URL property
    ///   - categorySet: The list of the most specific POI categories
    ///   - classifications: Classification array
    ///   - brands: Brands array. The name of the brand for the POI being returned.
    ///   - operatingHours: Opening hours for a POI (Points of Interest).
    public init(
        name: String? = nil, phone: String? = nil, url: String? = nil, categorySet: [PointOfInterestCategorySet]? = nil,
        classifications: [Classification]? = nil, brands: [BrandName]? = nil, operatingHours: OperatingHours? = nil
    ) {
        self.name = name
        self.phone = phone
        self.url = url
        self.categorySet = categorySet
        self.classifications = classifications
        self.brands = brands
        self.operatingHours = operatingHours
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case phone = "phone"
        case url = "url"
        case categorySet = "categorySet"
        case classifications = "classifications"
        case brands = "brands"
        case operatingHours = "openingHours"
    }

    /// Initialize a `PointOfInterest` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try? container.decode(String.self, forKey: .name)
        self.phone = try? container.decode(String.self, forKey: .phone)
        self.url = try? container.decode(String.self, forKey: .url)
        self.categorySet = try? container.decode([PointOfInterestCategorySet].self, forKey: .categorySet)
        self.classifications = try? container.decode([Classification].self, forKey: .classifications)
        self.brands = try? container.decode([BrandName].self, forKey: .brands)
        self.operatingHours = try? container.decode(OperatingHours.self, forKey: .operatingHours)
    }

    /// Encode a `PointOfInterest` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if name != nil { try? container.encode(name, forKey: .name) }
        if phone != nil { try? container.encode(phone, forKey: .phone) }
        if url != nil { try? container.encode(url, forKey: .url) }
        if categorySet != nil { try? container.encode(categorySet, forKey: .categorySet) }
        if classifications != nil { try? container.encode(classifications, forKey: .classifications) }
        if brands != nil { try? container.encode(brands, forKey: .brands) }
        if operatingHours != nil { try? container.encode(operatingHours, forKey: .operatingHours) }
    }
}
