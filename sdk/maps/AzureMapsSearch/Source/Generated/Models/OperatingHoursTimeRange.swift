// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Open time range for a day
public struct OperatingHoursTimeRange: Codable, Swift.Error {
    // MARK: Properties

    /// The point in the next 7 days range when a given POI is being opened, or the beginning of the range if it was opened before the range.
    public let startTime: OperatingHoursTime?
    /// The point in the next 7 days range when a given POI is being closed, or the beginning of the range if it was closed before the range.
    public let endTime: OperatingHoursTime?

    // MARK: Initializers

    /// Initialize a `OperatingHoursTimeRange` structure.
    /// - Parameters:
    ///   - startTime: The point in the next 7 days range when a given POI is being opened, or the beginning of the range if it was opened before the range.
    ///   - endTime: The point in the next 7 days range when a given POI is being closed, or the beginning of the range if it was closed before the range.
    public init(
        startTime: OperatingHoursTime? = nil, endTime: OperatingHoursTime? = nil
    ) {
        self.startTime = startTime
        self.endTime = endTime
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case startTime = "startTime"
        case endTime = "endTime"
    }

    /// Initialize a `OperatingHoursTimeRange` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.startTime = try? container.decode(OperatingHoursTime.self, forKey: .startTime)
        self.endTime = try? container.decode(OperatingHoursTime.self, forKey: .endTime)
    }

    /// Encode a `OperatingHoursTimeRange` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if startTime != nil { try? container.encode(startTime, forKey: .startTime) }
        if endTime != nil { try? container.encode(endTime, forKey: .endTime) }
    }
}
