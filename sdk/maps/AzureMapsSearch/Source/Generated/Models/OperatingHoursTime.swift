// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Represents a date and time
public struct OperatingHoursTime: Codable, Swift.Error {
    // MARK: Properties

    /// Represents current calendar date in POI time zone, e.g. "2019-02-07".
    public let date: String?
    /// Hours are in the 24 hour format in the local time of a POI; possible values are 0 - 23.
    public let hour: Int32?
    /// Minutes are in the local time of a POI; possible values are 0 - 59.
    public let minute: Int32?

    // MARK: Initializers

    /// Initialize a `OperatingHoursTime` structure.
    /// - Parameters:
    ///   - date: Represents current calendar date in POI time zone, e.g. "2019-02-07".
    ///   - hour: Hours are in the 24 hour format in the local time of a POI; possible values are 0 - 23.
    ///   - minute: Minutes are in the local time of a POI; possible values are 0 - 59.
    public init(
        date: String? = nil, hour: Int32? = nil, minute: Int32? = nil
    ) {
        self.date = date
        self.hour = hour
        self.minute = minute
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case date = "date"
        case hour = "hour"
        case minute = "minute"
    }

    /// Initialize a `OperatingHoursTime` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.date = try? container.decode(String.self, forKey: .date)
        self.hour = try? container.decode(Int32.self, forKey: .hour)
        self.minute = try? container.decode(Int32.self, forKey: .minute)
    }

    /// Encode a `OperatingHoursTime` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if date != nil { try? container.encode(date, forKey: .date) }
        if hour != nil { try? container.encode(hour, forKey: .hour) }
        if minute != nil { try? container.encode(minute, forKey: .minute) }
    }
}
