// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Result object for a Search API response.
public struct SearchAddressResultItem: Codable, Swift.Error {
    // MARK: Properties

    /// One of:
    /// * POI
    /// * Street
    /// * Geography
    /// * Point Address
    /// * Address Range
    /// * Cross Street
    public let type: SearchAddressResultType?
    /// Id property
    public let id: String?
    /// The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
    public let score: Double?
    /// Straight line distance between the result and geobias location in meters.
    public let distanceInMeters: Double?
    /// Information about the original data source of the Result. Used for support requests.
    public let info: String?

    public let entityType: GeographicEntityType?
    /// Details of the returned POI including information such as the name, phone, url address, and classifications.
    public let pointOfInterest: PointOfInterest?
    /// The address of the result
    public let address: Address?
    /// A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    public let position: LatLongPairAbbreviated?
    /// The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport.
    public let viewport: Viewport?
    /// Array of EntryPoints. Those describe the types of entrances available at the location. The type can be "main" for main entrances such as a front door, or a lobby, and "minor", for side and back doors.
    public let entryPoints: [EntryPoint]?
    /// Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
    public let addressRanges: AddressRanges?
    /// Optional section. Reference geometry id for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API.
    public let dataSources: DataSources?
    /// Information on the type of match.
    /// One of:
    ///   * AddressPoint
    ///   * HouseNumberRange
    ///   * Street
    public let matchType: MatchType?
    /// Detour time in seconds. Only returned for calls to the Search Along Route API.
    public let detourTime: Int32?

    // MARK: Initializers

    /// Initialize a `SearchAddressResultItem` structure.
    /// - Parameters:
    ///   - type: One of:
    /// * POI
    /// * Street
    /// * Geography
    /// * Point Address
    /// * Address Range
    /// * Cross Street
    ///   - id: Id property
    ///   - score: The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
    ///   - distanceInMeters: Straight line distance between the result and geobias location in meters.
    ///   - info: Information about the original data source of the Result. Used for support requests.
    ///   - entityType:
    ///   - pointOfInterest: Details of the returned POI including information such as the name, phone, url address, and classifications.
    ///   - address: The address of the result
    ///   - position: A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    ///   - viewport: The viewport that covers the result represented by the top-left and bottom-right coordinates of the viewport.
    ///   - entryPoints: Array of EntryPoints. Those describe the types of entrances available at the location. The type can be "main" for main entrances such as a front door, or a lobby, and "minor", for side and back doors.
    ///   - addressRanges: Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
    ///   - dataSources: Optional section. Reference geometry id for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API.
    ///   - matchType: Information on the type of match.
    /// One of:
    ///   * AddressPoint
    ///   * HouseNumberRange
    ///   * Street
    ///   - detourTime: Detour time in seconds. Only returned for calls to the Search Along Route API.
    public init(
        type: SearchAddressResultType? = nil, id: String? = nil, score: Double? = nil, distanceInMeters: Double? = nil,
        info: String? = nil, entityType: GeographicEntityType? = nil, pointOfInterest: PointOfInterest? = nil,
        address: Address? = nil, position: LatLongPairAbbreviated? = nil, viewport: Viewport? = nil,
        entryPoints: [EntryPoint]? = nil, addressRanges: AddressRanges? = nil, dataSources: DataSources? = nil,
        matchType: MatchType? = nil, detourTime: Int32? = nil
    ) {
        self.type = type
        self.id = id
        self.score = score
        self.distanceInMeters = distanceInMeters
        self.info = info
        self.entityType = entityType
        self.pointOfInterest = pointOfInterest
        self.address = address
        self.position = position
        self.viewport = viewport
        self.entryPoints = entryPoints
        self.addressRanges = addressRanges
        self.dataSources = dataSources
        self.matchType = matchType
        self.detourTime = detourTime
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case type = "type"
        case id = "id"
        case score = "score"
        case distanceInMeters = "dist"
        case info = "info"
        case entityType = "entityType"
        case pointOfInterest = "poi"
        case address = "address"
        case position = "position"
        case viewport = "viewport"
        case entryPoints = "entryPoints"
        case addressRanges = "addressRanges"
        case dataSources = "dataSources"
        case matchType = "matchType"
        case detourTime = "detourTime"
    }

    /// Initialize a `SearchAddressResultItem` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.type = try? container.decode(SearchAddressResultType.self, forKey: .type)
        self.id = try? container.decode(String.self, forKey: .id)
        self.score = try? container.decode(Double.self, forKey: .score)
        self.distanceInMeters = try? container.decode(Double.self, forKey: .distanceInMeters)
        self.info = try? container.decode(String.self, forKey: .info)
        self.entityType = try? container.decode(GeographicEntityType.self, forKey: .entityType)
        self.pointOfInterest = try? container.decode(PointOfInterest.self, forKey: .pointOfInterest)
        self.address = try? container.decode(Address.self, forKey: .address)
        self.position = try? container.decode(LatLongPairAbbreviated.self, forKey: .position)
        self.viewport = try? container.decode(Viewport.self, forKey: .viewport)
        self.entryPoints = try? container.decode([EntryPoint].self, forKey: .entryPoints)
        self.addressRanges = try? container.decode(AddressRanges.self, forKey: .addressRanges)
        self.dataSources = try? container.decode(DataSources.self, forKey: .dataSources)
        self.matchType = try? container.decode(MatchType.self, forKey: .matchType)
        self.detourTime = try? container.decode(Int32.self, forKey: .detourTime)
    }

    /// Encode a `SearchAddressResultItem` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if type != nil { try? container.encode(type, forKey: .type) }
        if id != nil { try? container.encode(id, forKey: .id) }
        if score != nil { try? container.encode(score, forKey: .score) }
        if distanceInMeters != nil { try? container.encode(distanceInMeters, forKey: .distanceInMeters) }
        if info != nil { try? container.encode(info, forKey: .info) }
        if entityType != nil { try? container.encode(entityType, forKey: .entityType) }
        if pointOfInterest != nil { try? container.encode(pointOfInterest, forKey: .pointOfInterest) }
        if address != nil { try? container.encode(address, forKey: .address) }
        if position != nil { try? container.encode(position, forKey: .position) }
        if viewport != nil { try? container.encode(viewport, forKey: .viewport) }
        if entryPoints != nil { try? container.encode(entryPoints, forKey: .entryPoints) }
        if addressRanges != nil { try? container.encode(addressRanges, forKey: .addressRanges) }
        if dataSources != nil { try? container.encode(dataSources, forKey: .dataSources) }
        if matchType != nil { try? container.encode(matchType, forKey: .matchType) }
        if detourTime != nil { try? container.encode(detourTime, forKey: .detourTime) }
    }
}
