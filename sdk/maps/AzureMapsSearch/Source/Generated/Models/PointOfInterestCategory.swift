// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// POI category result
public struct PointOfInterestCategory: Codable {
    // MARK: Properties

    /// Unique ID for the category. ID can be used to restrict search results to specific categories through other Search Service APIs, like [Get Search POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
    public let id: Int32?
    /// Name of the category
    public let name: String?
    /// Array of child category ids
    public let childIds: [Int32]?
    /// Array of alternative names of the category
    public let synonyms: [String]?

    // MARK: Initializers

    /// Initialize a `PointOfInterestCategory` structure.
    /// - Parameters:
    ///   - id: Unique ID for the category. ID can be used to restrict search results to specific categories through other Search Service APIs, like [Get Search POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi).
    ///   - name: Name of the category
    ///   - childIds: Array of child category ids
    ///   - synonyms: Array of alternative names of the category
    public init(
        id: Int32? = nil, name: String? = nil, childIds: [Int32]? = nil, synonyms: [String]? = nil
    ) {
        self.id = id
        self.name = name
        self.childIds = childIds
        self.synonyms = synonyms
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case name = "name"
        case childIds = "childCategoryIds"
        case synonyms = "synonyms"
    }

    /// Initialize a `PointOfInterestCategory` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(Int32.self, forKey: .id)
        self.name = try? container.decode(String.self, forKey: .name)
        self.childIds = try? container.decode([Int32].self, forKey: .childIds)
        self.synonyms = try? container.decode([String].self, forKey: .synonyms)
    }

    /// Encode a `PointOfInterestCategory` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if name != nil { try? container.encode(name, forKey: .name) }
        if childIds != nil { try? container.encode(childIds, forKey: .childIds) }
        if synonyms != nil { try? container.encode(synonyms, forKey: .synonyms) }
    }
}
