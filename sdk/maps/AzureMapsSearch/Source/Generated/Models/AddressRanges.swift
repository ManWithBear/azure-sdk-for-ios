// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.
public struct AddressRanges: Codable, Swift.Error {
    // MARK: Properties

    /// Address range on the left side of the street.
    public let rangeLeft: String?
    /// Address range on the right side of the street.
    public let rangeRight: String?
    /// A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    public let from: LatLongPairAbbreviated?
    /// A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    public let to: LatLongPairAbbreviated?

    // MARK: Initializers

    /// Initialize a `AddressRanges` structure.
    /// - Parameters:
    ///   - rangeLeft: Address range on the left side of the street.
    ///   - rangeRight: Address range on the right side of the street.
    ///   - from: A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    ///   - to: A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    public init(
        rangeLeft: String? = nil, rangeRight: String? = nil, from: LatLongPairAbbreviated? = nil,
        to: LatLongPairAbbreviated? = nil
    ) {
        self.rangeLeft = rangeLeft
        self.rangeRight = rangeRight
        self.from = from
        self.to = to
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case rangeLeft = "rangeLeft"
        case rangeRight = "rangeRight"
        case from = "from"
        case to = "to"
    }

    /// Initialize a `AddressRanges` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.rangeLeft = try? container.decode(String.self, forKey: .rangeLeft)
        self.rangeRight = try? container.decode(String.self, forKey: .rangeRight)
        self.from = try? container.decode(LatLongPairAbbreviated.self, forKey: .from)
        self.to = try? container.decode(LatLongPairAbbreviated.self, forKey: .to)
    }

    /// Encode a `AddressRanges` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if rangeLeft != nil { try? container.encode(rangeLeft, forKey: .rangeLeft) }
        if rangeRight != nil { try? container.encode(rangeRight, forKey: .rangeRight) }
        if from != nil { try? container.encode(from, forKey: .from) }
        if to != nil { try? container.encode(to, forKey: .to) }
    }
}
