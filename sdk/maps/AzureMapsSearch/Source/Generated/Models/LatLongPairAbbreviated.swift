// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// A location represented as a latitude and longitude using short names 'lat' & 'lon'.
public struct LatLongPairAbbreviated: Codable, Swift.Error {
    // MARK: Properties

    /// Latitude property
    public let lat: Double?
    /// Longitude property
    public let lon: Double?

    // MARK: Initializers

    /// Initialize a `LatLongPairAbbreviated` structure.
    /// - Parameters:
    ///   - lat: Latitude property
    ///   - lon: Longitude property
    public init(
        lat: Double? = nil, lon: Double? = nil
    ) {
        self.lat = lat
        self.lon = lon
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case lat = "lat"
        case lon = "lon"
    }

    /// Initialize a `LatLongPairAbbreviated` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.lat = try? container.decode(Double.self, forKey: .lat)
        self.lon = try? container.decode(Double.self, forKey: .lon)
    }

    /// Encode a `LatLongPairAbbreviated` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if lat != nil { try? container.encode(lat, forKey: .lat) }
        if lon != nil { try? container.encode(lon, forKey: .lon) }
    }
}
